<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>
// Place global declarations here.
clock time;
typedef int[0, 10000000] time_t;
typedef int[-10000, 20000] power_t;
typedef int[0, 149760000] battery_t;


const power_t slew_load = 414;
const power_t preheat_load = 414;

const power_t bg_load = 2989;
const battery_t max_cap = 149760000;
battery_t battery = 119808000;
const battery_t min_cap = 59904000;
const power_t max_load = 15000;


const time_t stop_simulation = 65*60*60; // period of the whole current time period.
time_t new_time = 0;
time_t slewing_start = 0;
time_t slewing_end = 0;
time_t stop_time = 0;
time_t start_time = 0;
time_t sun_transition = 0;

const int job_ids = 5; 
// L1-Band, L2-Band, X-Band, UHF, dummy

const power_t job_load[job_ids] = {3863, 3863, 11945, 2630, 0};
const int preheat_job[job_ids] = {1, 1, 0, 0, 0};
const int slew_job[job_ids] = {1, 1, 1, 0, 0};

const int no_att = 3; //default = 0, l1/l2 = 1, x = 2 
int curr_att = 0;
const power_t sun_power_by_att[no_att] = {5700, 6100, 5700};

bool slewed = false;
bool insolation = false;
const int job_att[job_ids] = {0, 0, 1, -1, -1}; // UHF is attitude agnostic

chan preHeat[job_ids], available[job_ids], not_available[job_ids], bUpdate[job_ids];

chan reached, align;
// length of sun times
const int l_sun = 43;
// The start and stop times of each insolation period
const time_t start_sun[l_sun] = {1151, 6655, 12159, 17663, 23168, 28672, 34176, 39680, 45184, 50688, 56192, 61696, 67200, 72705, 78209, 83713, 89217, 94721, 100226, 105730, 111234, 116738, 122242, 127747, 133251, 138755, 144260, 149764, 155268, 160773, 166277, 171781, 177286, 182790, 188295, 193799, 199304, 204808, 210313, 215818, 221322, 226827, 232332 };
const time_t stop_sun[l_sun] = {4620, 10127, 15633, 21140, 26646, 32153, 37660, 43167, 48673, 54180, 59687, 65194, 70701, 76208, 81715, 87222, 92729, 98236, 103743, 109250, 114757, 120265, 125772, 131279, 136786, 142294, 147801, 153309, 158816, 164324, 169831, 175339, 180846, 186354, 191862, 197369, 202877, 208385, 213893, 219401, 224909, 230417, 235925 };
int i_sun = 0;

const int l_x = 24;
const time_t start_x[l_x] = {6837, 23916, 29751, 60592, 65340, 66202, 70973, 71954, 77737, 83484, 89215, 95054, 106372, 112047, 148622, 153366, 154327, 159207, 160108, 165873, 171604, 177362, 194425, 200321 };
const time_t stop_x[l_x] = {7354, 24504, 30099, 61025, 65751, 66803, 71549, 72532, 78291, 84075, 89800, 95322, 106842, 112605, 149188, 153954, 154924, 159559, 160664, 166444, 172208, 177852, 195021, 200556 };

const int l_l1 = 38;
const time_t start_l1[l_l1] = {5367, 11204, 16951, 22674, 28430, 34307, 40374, 46421, 52289, 58049, 63772, 69513, 75349, 81376, 87459, 93369, 99149, 104876, 110608, 116414, 122392, 128487, 134437, 140238, 145971, 151696, 157475, 163402, 169496, 175495, 181325, 187070, 192792, 198552, 204435, 210504, 216541, 222402 };
const time_t stop_l1[l_l1] = {10937, 16774, 22521, 28244, 34000, 39877, 45944, 51991, 57859, 63619, 69342, 75083, 80919, 86946, 93029, 98939, 104719, 110446, 116178, 121984, 127962, 134057, 140007, 145808, 151541, 157266, 163045, 168972, 175066, 181065, 186895, 192640, 198362, 204122, 210005, 216074, 222111, 227972 };

const int l_l2 = 39;
const time_t start_l2[l_l2] = {2707, 8521, 14261, 19986, 25756, 31664, 37749, 43768, 49614, 55366, 61090, 66845, 72711, 78765, 84817, 90695, 96462, 102187, 107928, 113757, 119768, 125851, 131771, 137558, 143288, 149021, 154821, 160786, 166875, 172835, 178644, 184381, 190108, 195884, 201800, 207883, 213889, 219727, 225477 };
const time_t stop_l2[l_l2] = {8277, 14091, 19831, 25556, 31326, 37234, 43319, 49338, 55184, 60936, 66660, 72415, 78281, 84335, 90387, 96265, 102032, 107757, 113498, 119327, 125338, 131421, 137341, 143128, 148858, 154591, 160391, 166356, 172445, 178405, 184214, 189951, 195678, 201454, 207370, 213453, 219459, 225297, 231047 };

const int l_uhf = 11;
const time_t start_uhf[l_uhf] = {60917, 66429, 72087, 77787, 83507, 89317, 148887, 154504, 160190, 165900, 171645 };
const time_t stop_uhf[l_uhf] = {61141, 66947, 72667, 78366, 84023, 89530, 149330, 155067, 160775, 166457, 172058 };

int ind[job_ids] = {0,0,0,0,-1};
bool running[job_ids] = {false, false, false, false, false};
int job_count[job_ids] = {0,0,0,0,0};

int cost_rates[job_ids] = {0,0,0,0,-1};


// heuristic variables for l and x band ratios 
int r = 0;
const int r_l = 1;
const int r_x = 2;

const int preheat_time[job_ids] = {
  20*60,// L1-band
  20*60,// L2-band
  0,// X-band
  0,//UHF
  0 //dummy
};

const int slewing_time[job_ids] = {
  10*60,// L1-band
  10*60,// L2-band
  10*60,// X-band
  0,//UHF
  0 // dummy
};

int jobStartTime(const int job_id){
  if (job_id == 0) return start_l1[ind[job_id]];
  if (job_id == 1) return start_l2[ind[job_id]];
  if (job_id == 2) return start_x[ind[job_id]];
  if (job_id == 3) return start_uhf[ind[job_id]];
  if (job_id == 4) return 0;// dummy
}

int jobStopTime(const int job_id){
  if (job_id == 0) return stop_l1[ind[job_id]];
  if (job_id == 1) return stop_l2[ind[job_id]];
  if (job_id == 2) return stop_x[ind[job_id]];
  if (job_id == 3) return stop_uhf[ind[job_id]];
  if (job_id == 4) return 0;// dummy
}

int jobPreheatTime(const int job_id){
  // take slewing time into consideration
  return jobStartTime(job_id) - preheat_time[job_id] - slewing_time[job_id];
}

void nextJob(const int job_id){
  new_time=jobStopTime(job_id);
  ind[job_id] = ind[job_id] + 1;
}

bool skipable(const int job_id){
  if (job_id == 3) return false; // force UHF to execute if able
  return true;
}

void startJob(const int job_id){
  running[job_id] = true;
  if (job_id &lt; 2) r = r + r_x;//L band
  if (job_id == 2) r = r - r_l; //X-band
}

void stopJob(const int job_id){
  running[job_id] = false;
  job_count[job_id] = job_count[job_id] + 1;
}

bool job_possible(const int job_id){
  if(job_id == 3) return true; // prioritize UHF
  //if(slewing) return false; // another L or xband job working
  // heuristics
  if((job_id == 2) &amp;&amp; (r &gt;= r_l)) return true; // x-band
  if((job_id &lt;2) &amp;&amp; (r &lt; (r_x+r_l)*r_l)) return true; // l-band
  return false;
}

bool isAligned(const int job_id){
  if (job_att[job_id] == -1) return true;
  if (job_att[job_id] == curr_att) return true;
  return false;
}

bool hasToSlewBack(const int job_id){
  if(job_att[job_id] &gt;=0) return true; 
  return false;
}


void startSlewing(){
    slewed = true;
    // new_time already updated by the job provider
    slewing_start = new_time;
    slewing_end = new_time + 10*60;
} 

void startInsolation(){
    sun_transition = 0;
    insolation = true;
}

void startEclipse(){
    sun_transition = 0;
    insolation = false;
}

void setInsolation(){
    sun_transition = start_sun[i_sun];
    insolation = true;
}

void setEclipse(){
    sun_transition = stop_sun[i_sun];
    insolation = false;
    i_sun++;
}</declaration><template><name>Job0</name><declaration>const int job_id = 0;</declaration><location id="id0" x="16" y="144"><name x="22" y="106">start</name><committed/></location><location id="id1" x="8" y="360"><name x="-16" y="376">CleanUp</name></location><location id="id2" x="288" y="360"><name x="264" y="376">Battery_Update</name></location><location id="id3" x="616" y="80"><name x="606" y="50">End</name><committed/></location><location id="id4" x="-144" y="72"><name x="-168" y="40">Penalty</name><label kind="invariant" x="-112" y="40">cost'==
cost_rates[job_id]</label></location><location id="id5" x="-144" y="208"><name x="-154" y="178">Skip</name></location><location id="id6" x="616" y="360"><name x="632" y="314">SlewingBack</name></location><location id="id7" x="616" y="208"><name x="640" y="192">Check_Attitude</name><committed/></location><location id="id8" x="456" y="208"><name x="446" y="178">Available</name><committed/></location><location id="id9" x="8" y="208"><name x="-2" y="178">Idle</name></location><location id="id10" x="192" y="208"><name x="182" y="178">Align</name><committed/></location><location id="id11" x="456" y="80"><name x="446" y="50">Start</name></location><location id="id12" x="192" y="72"><name x="144" y="40">Slewing</name></location><location id="id13" x="320" y="208"><name x="310" y="178">Correct_Attitude</name></location><init ref="id0"/><transition><source ref="id0"/><target ref="id9"/></transition><transition><source ref="id2"/><target ref="id1"/><label kind="synchronisation" x="96" y="336">bUpdate[job_id]!</label></transition><transition><source ref="id1"/><target ref="id9"/><label kind="assignment" x="16" y="288">slewed = false</label></transition><transition><source ref="id3"/><target ref="id7"/></transition><transition><source ref="id8"/><target ref="id11"/></transition><transition><source ref="id6"/><target ref="id2"/><label kind="synchronisation" x="392" y="360">reached?</label><label kind="assignment" x="392" y="376">stop_time = slewing_end</label></transition><transition><source ref="id7"/><target ref="id2"/><label kind="guard" x="344" y="304">!hasToSlewBack(job_id)</label><label kind="assignment" x="344" y="288">stop_time = jobStopTime(job_id)</label><nail x="528" y="288"/><nail x="336" y="288"/></transition><transition><source ref="id9"/><target ref="id10"/><label kind="guard" x="32" y="168">job_possible(job_id)</label><label kind="synchronisation" x="32" y="184">preHeat[job_id]?</label></transition><transition><source ref="id12"/><target ref="id13"/><label kind="synchronisation" x="248" y="112">reached?</label></transition><transition><source ref="id4"/><target ref="id9"/><label kind="synchronisation" x="-104" y="96">not_available[job_id]?</label></transition><transition><source ref="id9"/><target ref="id5"/><label kind="guard" x="-112" y="216">skipable(job_id)</label><label kind="synchronisation" x="-112" y="232">preHeat[job_id]?</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="-256" y="136">available[job_id]?</label></transition><transition><source ref="id11"/><target ref="id3"/><label kind="synchronisation" x="480" y="56">not_available[job_id]?</label><label kind="assignment" x="480" y="40">stopJob(job_id)</label></transition><transition><source ref="id7"/><target ref="id6"/><label kind="guard" x="624" y="248">hasToSlewBack(job_id)</label><label kind="synchronisation" x="624" y="264">align!</label></transition><transition><source ref="id13"/><target ref="id8"/><label kind="synchronisation" x="344" y="208">available[job_id]?</label><label kind="assignment" x="344" y="223">startJob(job_id)</label></transition><transition><source ref="id10"/><target ref="id13"/><label kind="guard" x="208" y="208">isAligned(job_id)</label></transition><transition><source ref="id10"/><target ref="id12"/><label kind="guard" x="80" y="136">!isAligned(job_id)</label><label kind="synchronisation" x="80" y="120">align!</label></transition></template><template><name>JobProvider0</name><declaration>const int job_id=0;</declaration><location id="id14" x="40" y="80"><name x="30" y="50">Idle</name><label kind="invariant" x="-168" y="64">time &lt;= jobPreheatTime(job_id)</label></location><location id="id15" x="190" y="80"><name x="180" y="50">Available</name><label kind="invariant" x="208" y="64">time &lt;= jobStopTime(job_id)</label></location><location id="id16" x="190" y="230"><name x="224" y="216">PreHeat</name><label kind="invariant" x="180" y="245">time &lt;= jobStartTime(job_id)</label></location><init ref="id14"/><transition><source ref="id14"/><target ref="id16"/><label kind="guard" x="-128" y="128">time == jobPreheatTime(job_id)</label><label kind="synchronisation" x="-128" y="144">preHeat[job_id]!</label><label kind="assignment" x="-128" y="160">new_time = jobPreheatTime(job_id)</label></transition><transition><source ref="id16"/><target ref="id15"/><label kind="guard" x="224" y="112">time == jobStartTime(job_id)</label><label kind="synchronisation" x="224" y="128">available[job_id]!</label></transition><transition><source ref="id15"/><target ref="id14"/><label kind="guard" x="40" y="-16">time == jobStopTime(job_id)</label><label kind="synchronisation" x="56" y="0">not_available[job_id]!</label><label kind="assignment" x="80" y="16">nextJob(job_id)</label></transition></template><template><name>Job1</name><declaration>const int job_id = 1;</declaration><location id="id17" x="40" y="80"><name x="0" y="0">CleanUp</name></location><location id="id18" x="190" y="80"><name x="0" y="0">Battery_Update</name></location><location id="id19" x="190" y="230"><name x="0" y="0">End</name><committed/></location><location id="id20" x="40" y="230"><name x="0" y="0">Penalty</name><label kind="invariant" x="0" y="0">cost'==
cost_rates[job_id]</label></location><location id="id21" x="340" y="80"><name x="0" y="0">Skip</name></location><location id="id22" x="340" y="230"><name x="0" y="0">SlewingBack</name></location><location id="id23" x="340" y="380"><name x="0" y="0">Check_Attitude</name><committed/></location><location id="id24" x="190" y="380"><name x="0" y="0">Available</name><committed/></location><location id="id25" x="40" y="380"><name x="0" y="0">Idle</name></location><location id="id26" x="490" y="80"><name x="0" y="0">Align</name><committed/></location><location id="id27" x="490" y="230"><name x="0" y="0">Start</name></location><location id="id28" x="490" y="380"><name x="0" y="0">Slewing</name></location><location id="id29" x="490" y="530"><name x="0" y="0">Correct_Attitude</name></location><init ref="id25"/><transition><source ref="id18"/><target ref="id17"/><label kind="synchronisation" x="0" y="0">bUpdate[job_id]!</label></transition><transition><source ref="id17"/><target ref="id25"/><label kind="assignment" x="0" y="0">slewed = false</label></transition><transition><source ref="id19"/><target ref="id23"/></transition><transition><source ref="id24"/><target ref="id27"/></transition><transition><source ref="id22"/><target ref="id18"/><label kind="synchronisation" x="0" y="0">reached?</label><label kind="assignment" x="0" y="0">stop_time = slewing_end</label></transition><transition><source ref="id23"/><target ref="id18"/><label kind="guard" x="0" y="0">!hasToSlewBack(job_id)</label><label kind="assignment" x="0" y="0">stop_time = jobStopTime(job_id)</label></transition><transition><source ref="id25"/><target ref="id26"/><label kind="guard" x="0" y="0">job_possible(job_id)</label><label kind="synchronisation" x="0" y="0">preHeat[job_id]?</label></transition><transition><source ref="id28"/><target ref="id29"/><label kind="synchronisation" x="0" y="0">reached?</label></transition><transition><source ref="id20"/><target ref="id25"/><label kind="synchronisation" x="0" y="0">not_available[job_id]?</label></transition><transition><source ref="id25"/><target ref="id21"/><label kind="guard" x="0" y="0">skipable(job_id)</label><label kind="synchronisation" x="0" y="0">preHeat[job_id]?</label></transition><transition><source ref="id21"/><target ref="id20"/><label kind="synchronisation" x="0" y="0">available[job_id]?</label></transition><transition><source ref="id27"/><target ref="id19"/><label kind="synchronisation" x="0" y="0">not_available[job_id]?</label><label kind="assignment" x="0" y="0">stopJob(job_id)</label></transition><transition><source ref="id23"/><target ref="id22"/><label kind="guard" x="0" y="0">hasToSlewBack(job_id)</label><label kind="synchronisation" x="0" y="0">align!</label></transition><transition><source ref="id29"/><target ref="id24"/><label kind="synchronisation" x="0" y="0">available[job_id]?</label><label kind="assignment" x="0" y="0">startJob(job_id)</label></transition><transition><source ref="id26"/><target ref="id29"/><label kind="guard" x="0" y="0">isAligned(job_id)</label></transition><transition><source ref="id26"/><target ref="id28"/><label kind="guard" x="0" y="0">!isAligned(job_id)</label><label kind="synchronisation" x="0" y="0">align!</label></transition></template><template><name>JobProvider1</name><declaration>const int job_id=1;</declaration><location id="id30" x="40" y="80"><name x="0" y="0">Idle</name><label kind="invariant" x="0" y="0">time &lt;= jobPreheatTime(job_id)</label></location><location id="id31" x="190" y="80"><name x="0" y="0">Available</name><label kind="invariant" x="0" y="0">time &lt;= jobStopTime(job_id)</label></location><location id="id32" x="190" y="230"><name x="0" y="0">PreHeat</name><label kind="invariant" x="0" y="0">time &lt;= jobStartTime(job_id)</label></location><init ref="id30"/><transition><source ref="id30"/><target ref="id32"/><label kind="guard" x="0" y="0">time == jobPreheatTime(job_id)</label><label kind="synchronisation" x="0" y="0">preHeat[job_id]!</label><label kind="assignment" x="0" y="0">new_time = jobPreheatTime(job_id)</label></transition><transition><source ref="id32"/><target ref="id31"/><label kind="guard" x="0" y="0">time == jobStartTime(job_id)</label><label kind="synchronisation" x="0" y="0">available[job_id]!</label></transition><transition><source ref="id31"/><target ref="id30"/><label kind="guard" x="0" y="0">time == jobStopTime(job_id)</label><label kind="synchronisation" x="0" y="0">not_available[job_id]!</label><label kind="assignment" x="0" y="0">nextJob(job_id)</label></transition></template><template><name>Job2</name><declaration>const int job_id = 2;</declaration><location id="id33" x="40" y="80"><name x="0" y="0">CleanUp</name></location><location id="id34" x="190" y="80"><name x="0" y="0">Battery_Update</name></location><location id="id35" x="190" y="230"><name x="0" y="0">End</name><committed/></location><location id="id36" x="40" y="230"><name x="0" y="0">Penalty</name><label kind="invariant" x="0" y="0">cost'==
cost_rates[job_id]</label></location><location id="id37" x="340" y="80"><name x="0" y="0">Skip</name></location><location id="id38" x="340" y="230"><name x="0" y="0">SlewingBack</name></location><location id="id39" x="340" y="380"><name x="0" y="0">Check_Attitude</name><committed/></location><location id="id40" x="190" y="380"><name x="0" y="0">Available</name><committed/></location><location id="id41" x="40" y="380"><name x="0" y="0">Idle</name></location><location id="id42" x="490" y="80"><name x="0" y="0">Align</name><committed/></location><location id="id43" x="490" y="230"><name x="0" y="0">Start</name></location><location id="id44" x="490" y="380"><name x="0" y="0">Slewing</name></location><location id="id45" x="490" y="530"><name x="0" y="0">Correct_Attitude</name></location><init ref="id41"/><transition><source ref="id34"/><target ref="id33"/><label kind="synchronisation" x="0" y="0">bUpdate[job_id]!</label></transition><transition><source ref="id33"/><target ref="id41"/><label kind="assignment" x="0" y="0">slewed = false</label></transition><transition><source ref="id35"/><target ref="id39"/></transition><transition><source ref="id40"/><target ref="id43"/></transition><transition><source ref="id38"/><target ref="id34"/><label kind="synchronisation" x="0" y="0">reached?</label><label kind="assignment" x="0" y="0">stop_time = slewing_end</label></transition><transition><source ref="id39"/><target ref="id34"/><label kind="guard" x="0" y="0">!hasToSlewBack(job_id)</label><label kind="assignment" x="0" y="0">stop_time = jobStopTime(job_id)</label></transition><transition><source ref="id41"/><target ref="id42"/><label kind="guard" x="0" y="0">job_possible(job_id)</label><label kind="synchronisation" x="0" y="0">preHeat[job_id]?</label></transition><transition><source ref="id44"/><target ref="id45"/><label kind="synchronisation" x="0" y="0">reached?</label></transition><transition><source ref="id36"/><target ref="id41"/><label kind="synchronisation" x="0" y="0">not_available[job_id]?</label></transition><transition><source ref="id41"/><target ref="id37"/><label kind="guard" x="0" y="0">skipable(job_id)</label><label kind="synchronisation" x="0" y="0">preHeat[job_id]?</label></transition><transition><source ref="id37"/><target ref="id36"/><label kind="synchronisation" x="0" y="0">available[job_id]?</label></transition><transition><source ref="id43"/><target ref="id35"/><label kind="synchronisation" x="0" y="0">not_available[job_id]?</label><label kind="assignment" x="0" y="0">stopJob(job_id)</label></transition><transition><source ref="id39"/><target ref="id38"/><label kind="guard" x="0" y="0">hasToSlewBack(job_id)</label><label kind="synchronisation" x="0" y="0">align!</label></transition><transition><source ref="id45"/><target ref="id40"/><label kind="synchronisation" x="0" y="0">available[job_id]?</label><label kind="assignment" x="0" y="0">startJob(job_id)</label></transition><transition><source ref="id42"/><target ref="id45"/><label kind="guard" x="0" y="0">isAligned(job_id)</label></transition><transition><source ref="id42"/><target ref="id44"/><label kind="guard" x="0" y="0">!isAligned(job_id)</label><label kind="synchronisation" x="0" y="0">align!</label></transition></template><template><name>JobProvider2</name><declaration>const int job_id=2;</declaration><location id="id46" x="40" y="80"><name x="0" y="0">Idle</name><label kind="invariant" x="0" y="0">time &lt;= jobPreheatTime(job_id)</label></location><location id="id47" x="190" y="80"><name x="0" y="0">Available</name><label kind="invariant" x="0" y="0">time &lt;= jobStopTime(job_id)</label></location><location id="id48" x="190" y="230"><name x="0" y="0">PreHeat</name><label kind="invariant" x="0" y="0">time &lt;= jobStartTime(job_id)</label></location><init ref="id46"/><transition><source ref="id46"/><target ref="id48"/><label kind="guard" x="0" y="0">time == jobPreheatTime(job_id)</label><label kind="synchronisation" x="0" y="0">preHeat[job_id]!</label><label kind="assignment" x="0" y="0">new_time = jobPreheatTime(job_id)</label></transition><transition><source ref="id48"/><target ref="id47"/><label kind="guard" x="0" y="0">time == jobStartTime(job_id)</label><label kind="synchronisation" x="0" y="0">available[job_id]!</label></transition><transition><source ref="id47"/><target ref="id46"/><label kind="guard" x="0" y="0">time == jobStopTime(job_id)</label><label kind="synchronisation" x="0" y="0">not_available[job_id]!</label><label kind="assignment" x="0" y="0">nextJob(job_id)</label></transition></template><template><name>Job3</name><declaration>const int job_id = 3;</declaration><location id="id49" x="40" y="80"><name x="0" y="0">CleanUp</name></location><location id="id50" x="190" y="80"><name x="0" y="0">Battery_Update</name></location><location id="id51" x="190" y="230"><name x="0" y="0">End</name><committed/></location><location id="id52" x="40" y="230"><name x="0" y="0">Penalty</name><label kind="invariant" x="0" y="0">cost'==
cost_rates[job_id]</label></location><location id="id53" x="340" y="80"><name x="0" y="0">Skip</name></location><location id="id54" x="340" y="230"><name x="0" y="0">SlewingBack</name></location><location id="id55" x="340" y="380"><name x="0" y="0">Check_Attitude</name><committed/></location><location id="id56" x="190" y="380"><name x="0" y="0">Available</name><committed/></location><location id="id57" x="40" y="380"><name x="0" y="0">Idle</name></location><location id="id58" x="490" y="80"><name x="0" y="0">Align</name><committed/></location><location id="id59" x="490" y="230"><name x="0" y="0">Start</name></location><location id="id60" x="490" y="380"><name x="0" y="0">Slewing</name></location><location id="id61" x="490" y="530"><name x="0" y="0">Correct_Attitude</name></location><init ref="id57"/><transition><source ref="id50"/><target ref="id49"/><label kind="synchronisation" x="0" y="0">bUpdate[job_id]!</label></transition><transition><source ref="id49"/><target ref="id57"/><label kind="assignment" x="0" y="0">slewed = false</label></transition><transition><source ref="id51"/><target ref="id55"/></transition><transition><source ref="id56"/><target ref="id59"/></transition><transition><source ref="id54"/><target ref="id50"/><label kind="synchronisation" x="0" y="0">reached?</label><label kind="assignment" x="0" y="0">stop_time = slewing_end</label></transition><transition><source ref="id55"/><target ref="id50"/><label kind="guard" x="0" y="0">!hasToSlewBack(job_id)</label><label kind="assignment" x="0" y="0">stop_time = jobStopTime(job_id)</label></transition><transition><source ref="id57"/><target ref="id58"/><label kind="guard" x="0" y="0">job_possible(job_id)</label><label kind="synchronisation" x="0" y="0">preHeat[job_id]?</label></transition><transition><source ref="id60"/><target ref="id61"/><label kind="synchronisation" x="0" y="0">reached?</label></transition><transition><source ref="id52"/><target ref="id57"/><label kind="synchronisation" x="0" y="0">not_available[job_id]?</label></transition><transition><source ref="id57"/><target ref="id53"/><label kind="guard" x="0" y="0">skipable(job_id)</label><label kind="synchronisation" x="0" y="0">preHeat[job_id]?</label></transition><transition><source ref="id53"/><target ref="id52"/><label kind="synchronisation" x="0" y="0">available[job_id]?</label></transition><transition><source ref="id59"/><target ref="id51"/><label kind="synchronisation" x="0" y="0">not_available[job_id]?</label><label kind="assignment" x="0" y="0">stopJob(job_id)</label></transition><transition><source ref="id55"/><target ref="id54"/><label kind="guard" x="0" y="0">hasToSlewBack(job_id)</label><label kind="synchronisation" x="0" y="0">align!</label></transition><transition><source ref="id61"/><target ref="id56"/><label kind="synchronisation" x="0" y="0">available[job_id]?</label><label kind="assignment" x="0" y="0">startJob(job_id)</label></transition><transition><source ref="id58"/><target ref="id61"/><label kind="guard" x="0" y="0">isAligned(job_id)</label></transition><transition><source ref="id58"/><target ref="id60"/><label kind="guard" x="0" y="0">!isAligned(job_id)</label><label kind="synchronisation" x="0" y="0">align!</label></transition></template><template><name>JobProvider3</name><declaration>const int job_id=3;</declaration><location id="id62" x="40" y="80"><name x="0" y="0">Idle</name><label kind="invariant" x="0" y="0">time &lt;= jobPreheatTime(job_id)</label></location><location id="id63" x="190" y="80"><name x="0" y="0">Available</name><label kind="invariant" x="0" y="0">time &lt;= jobStopTime(job_id)</label></location><location id="id64" x="190" y="230"><name x="0" y="0">PreHeat</name><label kind="invariant" x="0" y="0">time &lt;= jobStartTime(job_id)</label></location><init ref="id62"/><transition><source ref="id62"/><target ref="id64"/><label kind="guard" x="0" y="0">time == jobPreheatTime(job_id)</label><label kind="synchronisation" x="0" y="0">preHeat[job_id]!</label><label kind="assignment" x="0" y="0">new_time = jobPreheatTime(job_id)</label></transition><transition><source ref="id64"/><target ref="id63"/><label kind="guard" x="0" y="0">time == jobStartTime(job_id)</label><label kind="synchronisation" x="0" y="0">available[job_id]!</label></transition><transition><source ref="id63"/><target ref="id62"/><label kind="guard" x="0" y="0">time == jobStopTime(job_id)</label><label kind="synchronisation" x="0" y="0">not_available[job_id]!</label><label kind="assignment" x="0" y="0">nextJob(job_id)</label></transition></template><template><name>Battery</name><declaration>power_t load = 0;

time_t start , stop;
time_t old_time = 0;
void update(const int job_id){
   /*
	 load = bg_load;

    battery -= load * (old_time - new_time);
   
    start = jobStartTime(ind[job_id]-1);
    stop = jobStopTime(ind[job_id]-1);
    if(insolation){
        if (sun_transition &gt;= start){
            battery += sun_power_by_att[job_att[job_id]] * (stop - sun_transition);
        }
        else if(sun_transition &lt;= old_time){
            battery += sun_power_by_att[job_att[job_id]] * (stop-start);
            battery += sun_power_by_att[0]*(start - old_time);
        }
        else{
            battery += sun_power_by_att[job_att[job_id]] * (stop-start);
            battery += sun_power_by_att[0]*(start - sun_transition);
        }
        battery += sun_power_by_att[0] * (new_time - stop);
    }
    else{
        if (sun_transition &gt;= start){
            battery += sun_power_by_att[job_att[job_id]] * (sun_transition - start);
            battery += sun_power_by_att[0] * (sun_transition - start);
        }
        else if(sun_transition &lt;= old_time){
            //no sun over the period
        }
        else{
            battery += sun_power_by_att[0]*(sun_transition - old_time);
        }
    }

    battery -= job_load[job_id]*(stop - start);
    if(slewed) battery -= slew_load*slewing_time[job_id]*2;

    battery -= preheat_load*preheat_time[job_id];
        
    if (battery &gt; max_cap){
        battery = max_cap;
    }
    stop_time = new_time;
*/
}</declaration><location id="id65" x="-96" y="232"><name x="-106" y="202">Init</name><committed/></location><location id="id66" x="176" y="232"><name x="166" y="202">Check</name><committed/></location><location id="id67" x="304" y="232"><name x="294" y="202">Depletion</name><committed/></location><location id="id68" x="40" y="232"><name x="30" y="202">Idle</name></location><init ref="id65"/><transition><source ref="id65"/><target ref="id68"/></transition><transition><source ref="id68"/><target ref="id66"/><label kind="select" x="72" y="120">job_id : int</label><label kind="synchronisation" x="72" y="104">bUpdate[job_id]?</label><label kind="assignment" x="72" y="136">update(job_id)</label><nail x="104" y="168"/></transition><transition><source ref="id66"/><target ref="id68"/><label kind="guard" x="56" y="240">battery &gt; min_cap</label></transition><transition><source ref="id66"/><target ref="id67"/><label kind="guard" x="216" y="240">battery &lt;= min_cap</label></transition></template><template><name>Sun</name><location id="id69" x="-480" y="152"><name x="-512" y="168">Insolation</name><label kind="invariant" x="-656" y="144">time &lt;= stop_sun[i_sun]</label></location><location id="id70" x="-232" y="152"><name x="-256" y="168">Eclipse</name><label kind="invariant" x="-208" y="144">time &lt;= start_sun[i_sun]</label></location><location id="id71" x="-352" y="-48"><name x="-360" y="-80">Init</name><committed/></location><init ref="id71"/><transition><source ref="id69"/><target ref="id70"/><label kind="guard" x="-400" y="272">time == stop_sun[i_sun]</label><label kind="assignment" x="-400" y="288">setEclipse()</label><nail x="-472" y="168"/><nail x="-360" y="280"/></transition><transition><source ref="id71"/><target ref="id69"/><label kind="guard" x="-472" y="-40">start_sun[0] == 0</label><label kind="assignment" x="-472" y="-24">startInsolation()</label><nail x="-480" y="-48"/></transition><transition><source ref="id70"/><target ref="id69"/><label kind="assignment" x="-408" y="88">setInsolation()</label><nail x="-360" y="40"/></transition><transition><source ref="id71"/><target ref="id70"/><label kind="guard" x="-336" y="-40">start_sun[0] &gt; 0</label><label kind="assignment" x="-336" y="-24">startEclipse()</label><nail x="-232" y="-48"/></transition></template><template><name>End_simulation</name><location id="id72" x="-48" y="80"><name x="-72" y="48">Running</name><label kind="invariant" x="-144" y="104">time &lt;= stop_simulation</label></location><location id="id73" x="216" y="80"><name x="206" y="50">Lock</name><committed/></location><init ref="id72"/><transition><source ref="id72"/><target ref="id73"/><label kind="guard" x="-7" y="24">time == stop_simulation</label><label kind="synchronisation" x="-8" y="41">bUpdate[4]!</label><label kind="assignment" x="-8" y="56">new_time = stop_simulation</label></transition></template><template><name>ADCS</name><location id="id74" x="-416" y="-96"><name x="-424" y="-80">End</name></location><location id="id75" x="-344" y="-216"><name x="-354" y="-246">Slewing</name><label kind="invariant" x="-320" y="-224">time&lt;=slewing_end</label></location><location id="id76" x="-488" y="-216"><name x="-498" y="-254">Idle</name></location><init ref="id76"/><transition><source ref="id74"/><target ref="id76"/><label kind="synchronisation" x="-512" y="-160">reached!</label></transition><transition><source ref="id75"/><target ref="id74"/><label kind="guard" x="-376" y="-144">time == slewing_end</label></transition><transition><source ref="id76"/><target ref="id75"/><label kind="synchronisation" x="-456" y="-248">align!</label><label kind="assignment" x="-456" y="-264">startSlewing()</label><nail x="-368" y="-216"/></transition></template><system>Jb0 = Job0();
JbP0 = JobProvider0();
Jb1 = Job1();
JbP1 = JobProvider1();
Jb2 = Job2();
JbP2 = JobProvider2();
Jb3 = Job3();
JbP3 = JobProvider3();
B = Battery();
//End_S = End_simulation();
ADC = ADCS();

// List one or more processes to be composed into a system.
system Jb0, JbP0, Jb1, JbP1, Jb2, JbP2, Jb3, JbP3, B, ADC;</system></nta>