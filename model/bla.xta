
// Place global declarations here.
clock time;
typedef int[-10000000, 10000000] time_t;
typedef int[-100000, 200000] power_t;
typedef int[0, 6000000000] battery_t;


const power_t slew_load = 414;
const power_t preheat_load = 414;

const power_t bg_load = 2989;
const battery_t max_cap = 149760000;
battery_t battery = 119808000;

const battery_t min_cap = 59904000;
const power_t max_load = 15000;

const time_t stop_simulation = 65*60*60; // period of the whole current time period.

time_t old_time = 0;
time_t slewing_start = 0;
time_t slewing_end = 0;
time_t stop_time = 0;
time_t start_time = 0;
time_t sun_transition = 0;

time_t sun_start = 0;

const int job_ids = 5; 
// L1-Band, L2-Band, X-Band, UHF, dummy
typedef int[0, job_ids-1] id_t;
const power_t job_load[job_ids] = {3863, 3863, 11945, 2630, 0};
const int preheat_job[job_ids] = {1, 1, 0, 0, 0};
const int slew_job[job_ids] = {1, 1, 1, 0, 0};

const int no_att = 3; //default = 0, l1/l2 = 1, x = 2
typedef int[0, no_att-1] att_t;
const att_t job_att[job_ids] = {1, 1, 2, 0, 0}; // UHF is attitude agnostic

int curr_att = 0;
const power_t sun_power_by_att[att_t] = {5700, 6100, 5700};

bool slewed = false;
bool insolation = false;

chan preHeat[job_ids], available[job_ids], not_available[job_ids], bUpdate[job_ids];

chan reached, align;
// length of sun times
time_t new_time[job_ids];
const int l_sun = 43;
// The start and stop times of each insolation period
const time_t start_sun[l_sun] = {1151, 6655, 12159, 17663, 23168, 28672, 34176, 39680, 45184, 50688, 56192, 61696, 67200, 72705, 78209, 83713, 89217, 94721, 100226, 105730, 111234, 116738, 122242, 127747, 133251, 138755, 144260, 149764, 155268, 160773, 166277, 171781, 177286, 182790, 188295, 193799, 199304, 204808, 210313, 215818, 221322, 226827, 232332 };
const time_t stop_sun[l_sun] = {4620, 10127, 15633, 21140, 26646, 32153, 37660, 43167, 48673, 54180, 59687, 65194, 70701, 76208, 81715, 87222, 92729, 98236, 103743, 109250, 114757, 120265, 125772, 131279, 136786, 142294, 147801, 153309, 158816, 164324, 169831, 175339, 180846, 186354, 191862, 197369, 202877, 208385, 213893, 219401, 224909, 230417, 235925 };
int i_sun = 0;

const int l_x = 24;
//const time_t start_x[l_x] = {6837, 23916, 29751, 60592, 65340, 66202, 70973, 71954, 77737, 83484, 89215, 95054, 106372, 112047, 148622, 153366, 154327, 159207, 160108, 165873, 171604, 177362, 194425, 200321 };
//const time_t stop_x[l_x] = {7354, 24504, 30099, 61025, 65751, 66803, 71549, 72532, 78291, 84075, 89800, 95322, 106842, 112605, 149188, 153954, 154924, 159559, 160664, 166444, 172208, 177852, 195021, 200556 };

const int l_l1 = 38;
//const time_t start_l1[l_l1] = {5367, 11204, 16951, 22674, 28430, 34307, 40374, 46421, 52289, 58049, 63772, 69513, 75349, 81376, 87459, 93369, 99149, 104876, 110608, 116414, 122392, 128487, 134437, 140238, 145971, 151696, 157475, 163402, 169496, 175495, 181325, 187070, 192792, 198552, 204435, 210504, 216541, 222402 };
//const time_t stop_l1[l_l1] = {10937, 16774, 22521, 28244, 34000, 39877, 45944, 51991, 57859, 63619, 69342, 75083, 80919, 86946, 93029, 98939, 104719, 110446, 116178, 121984, 127962, 134057, 140007, 145808, 151541, 157266, 163045, 168972, 175066, 181065, 186895, 192640, 198362, 204122, 210005, 216074, 222111, 227972 };

const int l_l2 = 39;
//const time_t start_l2[l_l2] = {2707, 8521, 14261, 19986, 25756, 31664, 37749, 43768, 49614, 55366, 61090, 66845, 72711, 78765, 84817, 90695, 96462, 102187, 107928, 113757, 119768, 125851, 131771, 137558, 143288, 149021, 154821, 160786, 166875, 172835, 178644, 184381, 190108, 195884, 201800, 207883, 213889, 219727, 225477 };
//const time_t stop_l2[l_l2] = {8277, 14091, 19831, 25556, 31326, 37234, 43319, 49338, 55184, 60936, 66660, 72415, 78281, 84335, 90387, 96265, 102032, 107757, 113498, 119327, 125338, 131421, 137341, 143128, 148858, 154591, 160391, 166356, 172445, 178405, 184214, 189951, 195678, 201454, 207370, 213453, 219459, 225297, 231047 };

const int l_uhf = 11;
//const time_t start_uhf[l_uhf] = {60917, 66429, 72087, 77787, 83507, 89317, 148887, 154504, 160190, 165900, 171645 };
//const time_t stop_uhf[l_uhf] = {61141, 66947, 72667, 78366, 84023, 89530, 149330, 155067, 160775, 166457, 172058 };
typedef int[0,111] ind_t;
ind_t ind[job_ids] = {0,0,0,0,0};
ind_t offsets[job_ids] = {0, 38, 77, 101, 0};
ind_t end[job_ids] = { 37, 76, 100, 111, 0};
bool running[job_ids] = {false, false, false, false, false};
int job_count[job_ids] = {0,0,0,0,0};

int cost_rates[job_ids] = {1,1,10,20,-1};
const time_t start_times[112] = 
{
5367, 11204, 16951, 22674, 28430, 34307, 40374, 46421, 52289, 58049, 63772, 69513, 75349, 81376, 87459, 93369, 99149, 104876, 110608, 116414, 122392, 128487, 134437, 140238, 145971, 151696, 157475, 163402, 169496, 175495, 181325, 187070, 192792, 198552, 204435, 210504, 216541, 222402,
2707, 8521, 14261, 19986, 25756, 31664, 37749, 43768, 49614, 55366, 61090, 66845, 72711, 78765, 84817, 90695, 96462, 102187, 107928, 113757, 119768, 125851, 131771, 137558, 143288, 149021, 154821, 160786, 166875, 172835, 178644, 184381, 190108, 195884, 201800, 207883, 213889, 219727, 225477,
6837, 23916, 29751, 60592, 65340, 66202, 70973, 71954, 77737, 83484, 89215, 95054, 106372, 112047, 148622, 153366, 154327, 159207, 160108, 165873, 171604, 177362, 194425, 200321,
60917, 66429, 72087, 77787, 83507, 89317, 148887, 154504, 160190, 165900, 171645
};
const time_t stop_times[112] = 
{
10937, 16774, 22521, 28244, 34000, 39877, 45944, 51991, 57859, 63619, 69342, 75083, 80919, 86946, 93029, 98939, 104719, 110446, 116178, 121984, 127962, 134057, 140007, 145808, 151541, 157266, 163045, 168972, 175066, 181065, 186895, 192640, 198362, 204122, 210005, 216074, 222111, 227972,
8277, 14091, 19831, 25556, 31326, 37234, 43319, 49338, 55184, 60936, 66660, 72415, 78281, 84335, 90387, 96265, 102032, 107757, 113498, 119327, 125338, 131421, 137341, 143128, 148858, 154591, 160391, 166356, 172445, 178405, 184214, 189951, 195678, 201454, 207370, 213453, 219459, 225297, 231047,
7354, 24504, 30099, 61025, 65751, 66803, 71549, 72532, 78291, 84075, 89800, 95322, 106842, 112605, 149188, 153954, 154924, 159559, 160664, 166444, 172208, 177852, 195021, 200556,
61141, 66947, 72667, 78366, 84023, 89530, 149330, 155067, 160775, 166457, 172058
};
// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 
// 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 
// 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
// 103, 104, 105, 106, 107, 108, 109, 110, 111

// heuristic variables for l and x band ratios 
int r = 0;
const int r_l = 1;
const int r_x = 2;

const time_t preheat_time[job_ids] = {
  20*60,// L1-band
  20*60,// L2-band
  0,// X-band
  0,//UHF
  0 //dummy
};

const time_t slewing_time[job_ids] = {
  10*60,// L1-band
  10*60,// L2-band
  10*60,// X-band
  0,//UHF
  0 // dummy
};

time_t jobStartTime(const id_t job_id){
//   if (job_id == 0) return start_l1[ind[job_id]];
//   if (job_id == 1) return start_l2[ind[job_id]];
//   if (job_id == 2) return start_x[ind[job_id]];
//   if (job_id == 3) return start_uhf[ind[job_id]];
    return start_times[offsets[job_id]];
}

time_t jobStopTime(const id_t job_id){
//   if (job_id == 0) return stop_l1[ind[job_id]];
//   if (job_id == 1) return stop_l2[ind[job_id]];
//   if (job_id == 2) return stop_x[ind[job_id]];
//   if (job_id == 3) return stop_uhf[ind[job_id]];
    return stop_times[offsets[job_id]];
}

time_t jobPreheatTime(const id_t job_id){
  // take slewing time into consideration
  return jobStartTime(job_id) - preheat_time[job_id] - slewing_time[job_id];
}

void nextJob(const id_t job_id){
  new_time[job_id] = jobStopTime(job_id);
  offsets[job_id]++;
}

bool skipable(const id_t job_id){ 

  if (job_id == 3) return false; // force UHF to execute if able
  // force at 95 % battery
  //if (battery >= (142272000 )) return false;
  return true;
}

void startJob(const id_t job_id){
  running[job_id] = true;
  if (job_id < 2) r = r + r_x;//L band
  if (job_id == 2) r = r - r_l; //X-band
}

void stopJob(const id_t job_id){
 // running[job_id] = false;
  job_count[job_id] = job_count[job_id] + 1;
}

bool job_possible(const id_t job_id){
  // heuristics
 for (id:id_t){
      if(running[id]) return false;
  }
  //if(job_id == 3) return true; // prioritize UHF

  if((job_id == 2) && (r >= r_l)) return true; // x-band
  if((job_id <2) && (r < (r_x+r_l)*r_l)) return true; // l-band
  return false;
}

bool isAligned(const id_t job_id){
  if (job_att[job_id] == curr_att) return true;
  //if (job_att[job_id] == curr_att) return true;
  return false;
}

bool hasToSlewBack(const id_t job_id){
  if(job_att[job_id] == 0 ) return false;
  if(job_att[job_id] == -1 ) return false;
  return true; 
}

void startSlewing(const id_t job_id){
    slewed = true;
    // new_time already updated by the job provider
    slewing_start = new_time[job_id];
    slewing_end = new_time[job_id] + 10*60;
} 

void startInsolation(){
    sun_transition = 0;
    insolation = true;
}

void startEclipse(){
    sun_transition = 0;
    insolation = false;
}

void setInsolation(){
    sun_transition = start_sun[i_sun];
    insolation = true;
}

void setEclipse(){
    sun_transition = stop_sun[i_sun];
    insolation = false;
    sun_start = start_sun[i_sun];
    i_sun++;
}

process Job0() {
const id_t job_id = 0;
state
    CleanUp,
    EndSlew,
    End,
    Penalty {cost'==
cost_rates[job_id]},
    Skip,
    SlewingBack,
    Check_Attitude,
    Available,
    Idle,
    Align,
    Start,
    Slewing,
    Correct_Attitude;
commit
    CleanUp,
    EndSlew,
    End,
    Check_Attitude,
    Available,
    Align;
init Idle;
trans
    EndSlew -> CleanUp { sync bUpdate[job_id]!;  },
    CleanUp -> Idle { assign slewed = false,
running[job_id] = false;  },
    End -> Check_Attitude {  },
    Available -> Start {  },
    SlewingBack -> EndSlew { sync reached?; assign stop_time = slewing_end;  },
    Check_Attitude -> EndSlew { guard !hasToSlewBack(job_id); assign stop_time = new_time[job_id];  },
    Idle -> Align { guard job_possible(job_id); sync preHeat[job_id]?; assign running[job_id] = true;  },
    Slewing -> Correct_Attitude { sync reached?;  },
    Penalty -> Idle { sync not_available[job_id]?;  },
    Idle -> Skip { guard skipable(job_id); sync preHeat[job_id]?;  },
    Skip -> Penalty { sync available[job_id]?;  },
    Start -> End { sync not_available[job_id]?; assign stopJob(job_id);  },
    /** */
    Check_Attitude -> SlewingBack { guard hasToSlewBack(job_id); sync align!; assign startSlewing(job_id);  },
    Correct_Attitude -> Available { sync available[job_id]?; assign startJob(job_id);  },
    Align -> Correct_Attitude { guard isAligned(job_id);  },
    /** */
    Align -> Slewing { guard !isAligned(job_id); sync align!; assign startSlewing(job_id);  };
}

process JobProvider0() {
const id_t job_id=0;
state
    Penalty {cost'== cost_rates[job_id]},
    End,
    Wait,
    Idle {time <= jobPreheatTime(job_id)},
    Available {time<=jobStopTime(job_id)},
    PreHeat {time <= jobStartTime(job_id)};
commit
    Penalty;
init Idle;
trans
    Penalty -> Wait { assign nextJob(job_id);  },
    Wait -> Penalty { guard time > jobPreheatTime(job_id) && 
!running[job_id] && 
offsets[job_id] < end[job_id];  },
    Wait -> End { guard offsets[job_id] == end[job_id];  },
    Wait -> Idle { guard !running[job_id] && 
offsets[job_id] < end[job_id];  },
    Available -> Wait { guard time == jobStopTime(job_id); sync not_available[job_id]!; assign nextJob(job_id),
new_time[job_id] = jobStopTime(job_id);  },
    Idle -> PreHeat { guard time == jobPreheatTime(job_id); sync preHeat[job_id]!; assign new_time[job_id] = jobPreheatTime(job_id);  },
    PreHeat -> Available { guard time == jobStartTime(job_id); sync available[job_id]!;  };
}

process Job1() {
const id_t job_id = 1;
state
    CleanUp,
    EndSlew,
    End,
    Penalty {cost'==
cost_rates[job_id]},
    Skip,
    SlewingBack,
    Check_Attitude,
    Available,
    Idle,
    Align,
    Start,
    Slewing,
    Correct_Attitude;
commit
    CleanUp,
    EndSlew,
    End,
    Check_Attitude,
    Available,
    Align;
init Idle;
trans
    EndSlew -> CleanUp { sync bUpdate[job_id]!;  },
    CleanUp -> Idle { assign slewed = false,
running[job_id] = false;  },
    End -> Check_Attitude {  },
    Available -> Start {  },
    SlewingBack -> EndSlew { sync reached?; assign stop_time = slewing_end;  },
    Check_Attitude -> EndSlew { guard !hasToSlewBack(job_id); assign stop_time = new_time[job_id];  },
    Idle -> Align { guard job_possible(job_id); sync preHeat[job_id]?; assign running[job_id] = true;  },
    Slewing -> Correct_Attitude { sync reached?;  },
    Penalty -> Idle { sync not_available[job_id]?;  },
    Idle -> Skip { guard skipable(job_id); sync preHeat[job_id]?;  },
    Skip -> Penalty { sync available[job_id]?;  },
    Start -> End { sync not_available[job_id]?; assign stopJob(job_id);  },
    /** */
    Check_Attitude -> SlewingBack { guard hasToSlewBack(job_id); sync align!; assign startSlewing(job_id);  },
    Correct_Attitude -> Available { sync available[job_id]?; assign startJob(job_id);  },
    Align -> Correct_Attitude { guard isAligned(job_id);  },
    /** */
    Align -> Slewing { guard !isAligned(job_id); sync align!; assign startSlewing(job_id);  };
}

process JobProvider1() {
const id_t job_id = 1;
state
    Penalty {cost'==
cost_rates[job_id]},
    End,
    Wait,
    Idle {time <= jobPreheatTime(job_id)},
    Available {time<=jobStopTime(job_id)},
    PreHeat {time <= jobStartTime(job_id)};
commit
    Penalty;
init Idle;
trans
    Penalty -> Wait { assign nextJob(job_id);  },
    Wait -> Penalty { guard time > jobPreheatTime(job_id) && 
!running[job_id] && 
offsets[job_id] < end[job_id];  },
    Wait -> End { guard offsets[job_id] == end[job_id];  },
    Wait -> Idle { guard !running[job_id] && 
offsets[job_id] < end[job_id];  },
    Available -> Wait { guard time == jobStopTime(job_id); sync not_available[job_id]!; assign nextJob(job_id),
new_time[job_id] = jobStopTime(job_id);  },
    Idle -> PreHeat { guard time == jobPreheatTime(job_id); sync preHeat[job_id]!; assign new_time[job_id] = jobPreheatTime(job_id);  },
    PreHeat -> Available { guard time == jobStartTime(job_id); sync available[job_id]!;  };
}

process Job2() {
const id_t job_id = 2;
state
    CleanUp,
    EndSlew,
    End,
    Penalty {cost'==
cost_rates[job_id]},
    Skip,
    SlewingBack,
    Check_Attitude,
    Available,
    Idle,
    Align,
    Start,
    Slewing,
    Correct_Attitude;
commit
    CleanUp,
    EndSlew,
    End,
    Check_Attitude,
    Available,
    Align;
init Idle;
trans
    EndSlew -> CleanUp { sync bUpdate[job_id]!;  },
    CleanUp -> Idle { assign slewed = false,
running[job_id] = false;  },
    End -> Check_Attitude {  },
    Available -> Start {  },
    SlewingBack -> EndSlew { sync reached?; assign stop_time = slewing_end;  },
    Check_Attitude -> EndSlew { guard !hasToSlewBack(job_id); assign stop_time = new_time[job_id];  },
    Idle -> Align { guard job_possible(job_id); sync preHeat[job_id]?; assign running[job_id] = true;  },
    Slewing -> Correct_Attitude { sync reached?;  },
    Penalty -> Idle { sync not_available[job_id]?;  },
    Idle -> Skip { guard skipable(job_id); sync preHeat[job_id]?;  },
    Skip -> Penalty { sync available[job_id]?;  },
    Start -> End { sync not_available[job_id]?; assign stopJob(job_id);  },
    /** */
    Check_Attitude -> SlewingBack { guard hasToSlewBack(job_id); sync align!; assign startSlewing(job_id);  },
    Correct_Attitude -> Available { sync available[job_id]?; assign startJob(job_id);  },
    Align -> Correct_Attitude { guard isAligned(job_id);  },
    /** */
    Align -> Slewing { guard !isAligned(job_id); sync align!; assign startSlewing(job_id);  };
}

process JobProvider2() {
const id_t job_id = 2;
state
    Penalty {cost'==
cost_rates[job_id]},
    End,
    Wait,
    Idle {time <= jobPreheatTime(job_id)},
    Available {time<=jobStopTime(job_id)},
    PreHeat {time <= jobStartTime(job_id)};
commit
    Penalty;
init Idle;
trans
    Penalty -> Wait { assign nextJob(job_id);  },
    Wait -> Penalty { guard time > jobPreheatTime(job_id) && 
!running[job_id] && 
offsets[job_id] < end[job_id];  },
    Wait -> End { guard offsets[job_id] == end[job_id];  },
    Wait -> Idle { guard !running[job_id] && 
offsets[job_id] < end[job_id];  },
    Available -> Wait { guard time == jobStopTime(job_id); sync not_available[job_id]!; assign nextJob(job_id),
new_time[job_id] = jobStopTime(job_id);  },
    Idle -> PreHeat { guard time == jobPreheatTime(job_id); sync preHeat[job_id]!; assign new_time[job_id] = jobPreheatTime(job_id);  },
    PreHeat -> Available { guard time == jobStartTime(job_id); sync available[job_id]!;  };
}

process Job3() {
const id_t job_id = 3;
state
    CleanUp,
    EndSlew,
    End,
    Penalty {cost'==
cost_rates[job_id]},
    Skip,
    SlewingBack,
    Check_Attitude,
    Available,
    Idle,
    Align,
    Start,
    Slewing,
    Correct_Attitude;
commit
    CleanUp,
    EndSlew,
    End,
    Check_Attitude,
    Available,
    Align;
init Idle;
trans
    EndSlew -> CleanUp { sync bUpdate[job_id]!;  },
    CleanUp -> Idle { assign slewed = false,
running[job_id] = false;  },
    End -> Check_Attitude {  },
    Available -> Start {  },
    SlewingBack -> EndSlew { sync reached?; assign stop_time = slewing_end;  },
    Check_Attitude -> EndSlew { guard !hasToSlewBack(job_id); assign stop_time = new_time[job_id];  },
    Idle -> Align { guard job_possible(job_id); sync preHeat[job_id]?; assign running[job_id] = true;  },
    Slewing -> Correct_Attitude { sync reached?;  },
    Penalty -> Idle { sync not_available[job_id]?;  },
    Idle -> Skip { guard skipable(job_id); sync preHeat[job_id]?;  },
    Skip -> Penalty { sync available[job_id]?;  },
    Start -> End { sync not_available[job_id]?; assign stopJob(job_id);  },
    /** */
    Check_Attitude -> SlewingBack { guard hasToSlewBack(job_id); sync align!; assign startSlewing(job_id);  },
    Correct_Attitude -> Available { sync available[job_id]?; assign startJob(job_id);  },
    Align -> Correct_Attitude { guard isAligned(job_id);  },
    /** */
    Align -> Slewing { guard !isAligned(job_id); sync align!; assign startSlewing(job_id);  };
}

process JobProvider3() {
const id_t job_id = 3;
state
    Penalty {cost'==
cost_rates[job_id]},
    End,
    Wait,
    Idle {time <= jobPreheatTime(job_id)},
    Available {time<=jobStopTime(job_id)},
    PreHeat {time <= jobStartTime(job_id)};
commit
    Penalty;
init Idle;
trans
    Penalty -> Wait { assign nextJob(job_id);  },
    Wait -> Penalty { guard time > jobPreheatTime(job_id) && 
!running[job_id] && 
offsets[job_id] < end[job_id];  },
    Wait -> End { guard offsets[job_id] == end[job_id];  },
    Wait -> Idle { guard !running[job_id] && 
offsets[job_id] < end[job_id];  },
    Available -> Wait { guard time == jobStopTime(job_id); sync not_available[job_id]!; assign nextJob(job_id),
new_time[job_id] = jobStopTime(job_id);  },
    Idle -> PreHeat { guard time == jobPreheatTime(job_id); sync preHeat[job_id]!; assign new_time[job_id] = jobPreheatTime(job_id);  },
    PreHeat -> Available { guard time == jobStartTime(job_id); sync available[job_id]!;  };
}

process Battery() {
time_t start , stop;

typedef int[-100000000, 100000000] long_t;

long_t abs(long_t a){
    if(a <0){
        return a*(-1);
    }
    return a;
}

void sunlight(const id_t job_id){
    start = start_times[offsets[job_id]-1];
    stop = stop_times[offsets[job_id]-1];
    if(insolation){
        // if the sun transitioned after the job start
        if (sun_transition >= start){
            if (sun_transition >= stop){
                battery += sun_power_by_att[0] * abs(sun_transition - stop);
            }
            else{
                battery += sun_power_by_att[job_att[job_id]] * abs(stop - sun_transition);
                //sun exposure during slewing
                battery += sun_power_by_att[0] * abs(stop_time - stop);
            }
            
        }
        // if 
        else if(sun_transition <= old_time){
            battery += sun_power_by_att[job_att[job_id]] * abs(stop-start);
            battery += sun_power_by_att[0]*abs(start - old_time);
        }
        else{
           battery += sun_power_by_att[job_att[job_id]] * abs(stop-start);
           battery += sun_power_by_att[0]*abs(start - sun_transition);
        }

    }
    else{
        if (sun_transition >= start){
            battery += sun_power_by_att[job_att[job_id]] * abs(sun_transition - start);
            battery += sun_power_by_att[0] * abs(sun_transition - start);
        }
        else if(sun_transition <= old_time){
            //no sun over the period
        }
        else{
            battery+= sun_power_by_att[0]*abs(sun_transition - old_time);
        }
        //sun exposure during slewing
        if (sun_transition >= stop){
            battery += sun_power_by_att[0] * abs(sun_transition - stop);
        }
        else{
            battery += sun_power_by_att[0] * abs(stop_time - stop);
        }

    }
}
long_t temp = 0;
void update(const id_t job_id){
    if(job_id < job_ids-1){
        temp = (stop_time - old_time);
        battery -= abs(stop_time - old_time);;
        start = start_times[offsets[job_id]-1];
        stop = stop_times[offsets[job_id]-1];
        sunlight(job_id);
        battery -= job_load[job_id]*abs(stop - start);
        battery -= slew_load*slewing_time[job_id]*2;
        battery -= preheat_load*preheat_time[job_id];
        old_time = stop_time;
    }
    // sun 
    else{
        // battery was updated after last transition
        if(old_time > sun_start){
            battery += sun_power_by_att[0] * abs( sun_transition - old_time);
            battery -= bg_load * abs(sun_transition - old_time);
        }
        else{
            battery += sun_power_by_att[0] * abs(sun_transition - sun_start);
            battery -= bg_load * abs(sun_transition - sun_start);
        }
        
        old_time = sun_transition;
    }

    if (battery > max_cap){
        battery = max_cap;
    }
}
state
    Init,
    Check,
    Depletion,
    Idle;
commit
    Init,
    Check,
    Depletion;
init Init;
trans
    Idle -> Check { select job_id : id_t; sync bUpdate[job_id]?; assign update(job_id);  },
    Init -> Idle {  },
    Check -> Idle { guard battery > min_cap;  },
    Check -> Depletion { guard battery <= min_cap;  };
}

process Sun() {

state
    B_update,
    End,
    Insolation {time <= stop_sun[i_sun]},
    Eclipse {time <= start_sun[i_sun]},
    Init;
commit
    B_update,
    Init;
init Init;
trans
    B_update -> Eclipse { sync bUpdate[job_ids-1]!;  },
    Insolation -> B_update { guard time == stop_sun[i_sun] 
&& i_sun < l_sun-1; assign setEclipse();  },
    Eclipse -> End { guard i_sun == l_sun-1;  },
    Insolation -> End { guard i_sun == l_sun-1;  },
    Init -> Insolation { guard start_sun[0] == 0; assign startInsolation();  },
    Eclipse -> Insolation { guard time == start_sun[i_sun] && i_sun < l_sun-1; assign setInsolation();  },
    Init -> Eclipse { guard start_sun[0] > 0; assign startEclipse();  };
}

process End_simulation() {

state
    Running {time <= stop_simulation},
    Lock;
commit
    Lock;
init Running;
trans
    Running -> Lock { guard time == stop_simulation;  };
}

process ADCS() {

state
    End,
    Slewing {time <= slewing_end},
    Idle;
commit
    End;
init Idle;
trans
    End -> Idle { sync reached!;  },
    Slewing -> End { guard time == slewing_end;  },
    Idle -> Slewing { sync align?;  };
}
Jb0 = Job0();
JbP0 = JobProvider0();
Jb1 = Job1();
JbP1 = JobProvider1();
Jb2 = Job2();
JbP2 = JobProvider2();
Jb3 = Job3();
JbP3 = JobProvider3();
S = Sun();
B = Battery();
End_S = End_simulation();
ADC = ADCS();

// List one or more processes to be composed into a system.
system Jb0, JbP0, Jb1, JbP1, Jb2, JbP2, Jb3, JbP3, S, B, ADC, End_S;