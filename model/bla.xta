
// Place global declarations here.
clock time;
typedef int[0, 10000000] time_t;
typedef int[-10000, 20000] power_t;
typedef int[0, 149760000] battery_t;


const power_t slew_load = 414;
const power_t preheat_load = 414;

const power_t bg_load = 2989;
const battery_t max_cap = 149760000;
battery_t battery = 119808000;
const battery_t min_cap = 59904000;
const power_t max_load = 15000;


const time_t stop_simulation = 65*60*60; // period of the whole current time period.
time_t new_time = 0;
time_t slewing_start = 0;
time_t slewing_end = 0;
time_t stop_time = 0;
time_t start_time = 0;
time_t sun_transition = 0;

const int job_ids = 5; 
// L1-Band, L2-Band, X-Band, UHF, dummy

const power_t job_load[job_ids] = {3863, 3863, 11945, 2630, 0};
const int preheat_job[job_ids] = {1, 1, 0, 0, 0};
const int slew_job[job_ids] = {1, 1, 1, 0, 0};

const int no_att = 3; //default = 0, l1/l2 = 1, x = 2 
int curr_att = 0;
const power_t sun_power_by_att[no_att] = {5700, 6100, 5700};

bool slewed = false;
bool insolation = false;
const int job_att[job_ids] = {0, 0, 1, -1, -1}; // UHF is attitude agnostic

chan preHeat[job_ids], available[job_ids], not_available[job_ids], bUpdate[job_ids];

chan reached, align;
// length of sun times
const int l_sun = 43;
// The start and stop times of each insolation period
const time_t start_sun[l_sun] = {1151, 6655, 12159, 17663, 23168, 28672, 34176, 39680, 45184, 50688, 56192, 61696, 67200, 72705, 78209, 83713, 89217, 94721, 100226, 105730, 111234, 116738, 122242, 127747, 133251, 138755, 144260, 149764, 155268, 160773, 166277, 171781, 177286, 182790, 188295, 193799, 199304, 204808, 210313, 215818, 221322, 226827, 232332 };
const time_t stop_sun[l_sun] = {4620, 10127, 15633, 21140, 26646, 32153, 37660, 43167, 48673, 54180, 59687, 65194, 70701, 76208, 81715, 87222, 92729, 98236, 103743, 109250, 114757, 120265, 125772, 131279, 136786, 142294, 147801, 153309, 158816, 164324, 169831, 175339, 180846, 186354, 191862, 197369, 202877, 208385, 213893, 219401, 224909, 230417, 235925 };
int i_sun = 0;

const int l_x = 24;
const time_t start_x[l_x] = {6837, 23916, 29751, 60592, 65340, 66202, 70973, 71954, 77737, 83484, 89215, 95054, 106372, 112047, 148622, 153366, 154327, 159207, 160108, 165873, 171604, 177362, 194425, 200321 };
const time_t stop_x[l_x] = {7354, 24504, 30099, 61025, 65751, 66803, 71549, 72532, 78291, 84075, 89800, 95322, 106842, 112605, 149188, 153954, 154924, 159559, 160664, 166444, 172208, 177852, 195021, 200556 };

const int l_l1 = 38;
const time_t start_l1[l_l1] = {5367, 11204, 16951, 22674, 28430, 34307, 40374, 46421, 52289, 58049, 63772, 69513, 75349, 81376, 87459, 93369, 99149, 104876, 110608, 116414, 122392, 128487, 134437, 140238, 145971, 151696, 157475, 163402, 169496, 175495, 181325, 187070, 192792, 198552, 204435, 210504, 216541, 222402 };
const time_t stop_l1[l_l1] = {10937, 16774, 22521, 28244, 34000, 39877, 45944, 51991, 57859, 63619, 69342, 75083, 80919, 86946, 93029, 98939, 104719, 110446, 116178, 121984, 127962, 134057, 140007, 145808, 151541, 157266, 163045, 168972, 175066, 181065, 186895, 192640, 198362, 204122, 210005, 216074, 222111, 227972 };

const int l_l2 = 39;
const time_t start_l2[l_l2] = {2707, 8521, 14261, 19986, 25756, 31664, 37749, 43768, 49614, 55366, 61090, 66845, 72711, 78765, 84817, 90695, 96462, 102187, 107928, 113757, 119768, 125851, 131771, 137558, 143288, 149021, 154821, 160786, 166875, 172835, 178644, 184381, 190108, 195884, 201800, 207883, 213889, 219727, 225477 };
const time_t stop_l2[l_l2] = {8277, 14091, 19831, 25556, 31326, 37234, 43319, 49338, 55184, 60936, 66660, 72415, 78281, 84335, 90387, 96265, 102032, 107757, 113498, 119327, 125338, 131421, 137341, 143128, 148858, 154591, 160391, 166356, 172445, 178405, 184214, 189951, 195678, 201454, 207370, 213453, 219459, 225297, 231047 };

const int l_uhf = 11;
const time_t start_uhf[l_uhf] = {60917, 66429, 72087, 77787, 83507, 89317, 148887, 154504, 160190, 165900, 171645 };
const time_t stop_uhf[l_uhf] = {61141, 66947, 72667, 78366, 84023, 89530, 149330, 155067, 160775, 166457, 172058 };

int ind[job_ids] = {0,0,0,0,-1};
bool running[job_ids] = {false, false, false, false, false};
int job_count[job_ids] = {0,0,0,0,0};

int cost_rates[job_ids] = {0,0,0,0,-1};


// heuristic variables for l and x band ratios 
int r = 0;
const int r_l = 1;
const int r_x = 2;

const int preheat_time[job_ids] = {
  20*60,// L1-band
  20*60,// L2-band
  0,// X-band
  0,//UHF
  0 //dummy
};

const int slewing_time[job_ids] = {
  10*60,// L1-band
  10*60,// L2-band
  10*60,// X-band
  0,//UHF
  0 // dummy
};

int jobStartTime(const int job_id){
  if (job_id == 0) return start_l1[ind[job_id]];
  if (job_id == 1) return start_l2[ind[job_id]];
  if (job_id == 2) return start_x[ind[job_id]];
  if (job_id == 3) return start_uhf[ind[job_id]];
  if (job_id == 4) return 0;// dummy
}

int jobStopTime(const int job_id){
  if (job_id == 0) return stop_l1[ind[job_id]];
  if (job_id == 1) return stop_l2[ind[job_id]];
  if (job_id == 2) return stop_x[ind[job_id]];
  if (job_id == 3) return stop_uhf[ind[job_id]];
  if (job_id == 4) return 0;// dummy
}

int jobPreheatTime(const int job_id){
  // take slewing time into consideration
  return jobStartTime(job_id) - preheat_time[job_id] - slewing_time[job_id];
}

void nextJob(const int job_id){
  new_time=jobStopTime(job_id);
  ind[job_id] = ind[job_id] + 1;
}

bool skipable(const int job_id){
  if (job_id == 3) return false; // force UHF to execute if able
  return true;
}

void startJob(const int job_id){
  running[job_id] = true;
  if (job_id < 2) r = r + r_x;//L band
  if (job_id == 2) r = r - r_l; //X-band
}

void stopJob(const int job_id){
  running[job_id] = false;
  job_count[job_id] = job_count[job_id] + 1;
}

bool job_possible(const int job_id){
  if(job_id == 3) return true; // prioritize UHF
  //if(slewing) return false; // another L or xband job working
  // heuristics
  if((job_id == 2) && (r >= r_l)) return true; // x-band
  if((job_id <2) && (r < (r_x+r_l)*r_l)) return true; // l-band
  return false;
}

bool isAligned(const int job_id){
  if (job_att[job_id] == -1) return true;
  if (job_att[job_id] == curr_att) return true;
  return false;
}

bool hasToSlewBack(const int job_id){
  if(job_att[job_id] >=0) return true; 
  return false;
}


void startSlewing(){
    slewed = true;
    // new_time already updated by the job provider
    slewing_start = new_time;
    slewing_end = new_time + 10*60;
} 

void startInsolation(){
    sun_transition = 0;
    insolation = true;
}

void startEclipse(){
    sun_transition = 0;
    insolation = false;
}

void setInsolation(){
    sun_transition = start_sun[i_sun];
    insolation = true;
}

void setEclipse(){
    sun_transition = stop_sun[i_sun];
    insolation = false;
    i_sun++;
}

process Job0() {
const int job_id = 0;
state
    CleanUp,
    EndSlew,
    End,
    Penalty {cost'==
cost_rates[job_id]},
    Skip,
    SlewingBack,
    Check_Attitude,
    Available,
    Idle,
    Align,
    Start,
    Slewing,
    Correct_Attitude;
commit
    End,
    Check_Attitude,
    Available,
    Align;
init Idle;
trans
    EndSlew -> CleanUp { sync bUpdate[job_id]!;  },
    CleanUp -> Idle { assign slewed = false;  },
    End -> Check_Attitude {  },
    Available -> Start {  },
    SlewingBack -> EndSlew { sync reached?; assign stop_time = slewing_end;  },
    Check_Attitude -> EndSlew { guard !hasToSlewBack(job_id); assign stop_time = jobStopTime(job_id);  },
    Idle -> Align { guard job_possible(job_id); sync preHeat[job_id]?;  },
    Slewing -> Correct_Attitude { sync reached?;  },
    Penalty -> Idle { sync not_available[job_id]?;  },
    Idle -> Skip { guard skipable(job_id); sync preHeat[job_id]?;  },
    Skip -> Penalty { sync available[job_id]?;  },
    Start -> End { sync not_available[job_id]?; assign stopJob(job_id);  },
    Check_Attitude -> SlewingBack { guard hasToSlewBack(job_id); sync align!;  },
    Correct_Attitude -> Available { sync available[job_id]?; assign startJob(job_id);  },
    Align -> Correct_Attitude { guard isAligned(job_id);  },
    Align -> Slewing { guard !isAligned(job_id); sync align!;  };
}

process JobProvider0() {
const int job_id=0;
state
    Idle {time <= jobPreheatTime(job_id)},
    Available {time <= jobStopTime(job_id)},
    PreHeat {time <= jobStartTime(job_id)};
init Idle;
trans
    Idle -> PreHeat { guard time == jobPreheatTime(job_id); sync preHeat[job_id]!; assign new_time = jobPreheatTime(job_id);  },
    PreHeat -> Available { guard time == jobStartTime(job_id); sync available[job_id]!;  },
    Available -> Idle { guard time == jobStopTime(job_id); sync not_available[job_id]!; assign nextJob(job_id);  };
}

process Job1() {
const int job_id = 1;
state
    CleanUp,
    EndSlew,
    End,
    Penalty {cost'==
cost_rates[job_id]},
    Skip,
    SlewingBack,
    Check_Attitude,
    Available,
    Idle,
    Align,
    Start,
    Slewing,
    Correct_Attitude;
commit
    End,
    Check_Attitude,
    Available,
    Align;
init Idle;
trans
    EndSlew -> CleanUp { sync bUpdate[job_id]!;  },
    CleanUp -> Idle { assign slewed = false;  },
    End -> Check_Attitude {  },
    Available -> Start {  },
    SlewingBack -> EndSlew { sync reached?; assign stop_time = slewing_end;  },
    Check_Attitude -> EndSlew { guard !hasToSlewBack(job_id); assign stop_time = jobStopTime(job_id);  },
    Idle -> Align { guard job_possible(job_id); sync preHeat[job_id]?;  },
    Slewing -> Correct_Attitude { sync reached?;  },
    Penalty -> Idle { sync not_available[job_id]?;  },
    Idle -> Skip { guard skipable(job_id); sync preHeat[job_id]?;  },
    Skip -> Penalty { sync available[job_id]?;  },
    Start -> End { sync not_available[job_id]?; assign stopJob(job_id);  },
    Check_Attitude -> SlewingBack { guard hasToSlewBack(job_id); sync align!;  },
    Correct_Attitude -> Available { sync available[job_id]?; assign startJob(job_id);  },
    Align -> Correct_Attitude { guard isAligned(job_id);  },
    Align -> Slewing { guard !isAligned(job_id); sync align!;  };
}

process JobProvider1() {
const int job_id=1;
state
    Idle {time <= jobPreheatTime(job_id)},
    Available {time <= jobStopTime(job_id)},
    PreHeat {time <= jobStartTime(job_id)};
init Idle;
trans
    Idle -> PreHeat { guard time == jobPreheatTime(job_id); sync preHeat[job_id]!; assign new_time = jobPreheatTime(job_id);  },
    PreHeat -> Available { guard time == jobStartTime(job_id); sync available[job_id]!;  },
    Available -> Idle { guard time == jobStopTime(job_id); sync not_available[job_id]!; assign nextJob(job_id);  };
}

process Job2() {
const int job_id = 2;
state
    CleanUp,
    EndSlew,
    End,
    Penalty {cost'==
cost_rates[job_id]},
    Skip,
    SlewingBack,
    Check_Attitude,
    Available,
    Idle,
    Align,
    Start,
    Slewing,
    Correct_Attitude;
commit
    End,
    Check_Attitude,
    Available,
    Align;
init Idle;
trans
    EndSlew -> CleanUp { sync bUpdate[job_id]!;  },
    CleanUp -> Idle { assign slewed = false;  },
    End -> Check_Attitude {  },
    Available -> Start {  },
    SlewingBack -> EndSlew { sync reached?; assign stop_time = slewing_end;  },
    Check_Attitude -> EndSlew { guard !hasToSlewBack(job_id); assign stop_time = jobStopTime(job_id);  },
    Idle -> Align { guard job_possible(job_id); sync preHeat[job_id]?;  },
    Slewing -> Correct_Attitude { sync reached?;  },
    Penalty -> Idle { sync not_available[job_id]?;  },
    Idle -> Skip { guard skipable(job_id); sync preHeat[job_id]?;  },
    Skip -> Penalty { sync available[job_id]?;  },
    Start -> End { sync not_available[job_id]?; assign stopJob(job_id);  },
    Check_Attitude -> SlewingBack { guard hasToSlewBack(job_id); sync align!;  },
    Correct_Attitude -> Available { sync available[job_id]?; assign startJob(job_id);  },
    Align -> Correct_Attitude { guard isAligned(job_id);  },
    Align -> Slewing { guard !isAligned(job_id); sync align!;  };
}

process JobProvider2() {
const int job_id = 2;
state
    Idle {time <= jobPreheatTime(job_id)},
    Available {time <= jobStopTime(job_id)},
    PreHeat {time <= jobStartTime(job_id)};
init Idle;
trans
    Idle -> PreHeat { guard time == jobPreheatTime(job_id); sync preHeat[job_id]!; assign new_time = jobPreheatTime(job_id);  },
    PreHeat -> Available { guard time == jobStartTime(job_id); sync available[job_id]!;  },
    Available -> Idle { guard time == jobStopTime(job_id); sync not_available[job_id]!; assign nextJob(job_id);  };
}

process Job3() {
const int job_id = 3;
state
    CleanUp,
    EndSlew,
    End,
    Penalty {cost'==
cost_rates[job_id]},
    Skip,
    SlewingBack,
    Check_Attitude,
    Available,
    Idle,
    Align,
    Start,
    Slewing,
    Correct_Attitude;
commit
    End,
    Check_Attitude,
    Available,
    Align;
init Idle;
trans
    EndSlew -> CleanUp { sync bUpdate[job_id]!;  },
    CleanUp -> Idle { assign slewed = false;  },
    End -> Check_Attitude {  },
    Available -> Start {  },
    SlewingBack -> EndSlew { sync reached?; assign stop_time = slewing_end;  },
    Check_Attitude -> EndSlew { guard !hasToSlewBack(job_id); assign stop_time = jobStopTime(job_id);  },
    Idle -> Align { guard job_possible(job_id); sync preHeat[job_id]?;  },
    Slewing -> Correct_Attitude { sync reached?;  },
    Penalty -> Idle { sync not_available[job_id]?;  },
    Idle -> Skip { guard skipable(job_id); sync preHeat[job_id]?;  },
    Skip -> Penalty { sync available[job_id]?;  },
    Start -> End { sync not_available[job_id]?; assign stopJob(job_id);  },
    Check_Attitude -> SlewingBack { guard hasToSlewBack(job_id); sync align!;  },
    Correct_Attitude -> Available { sync available[job_id]?; assign startJob(job_id);  },
    Align -> Correct_Attitude { guard isAligned(job_id);  },
    Align -> Slewing { guard !isAligned(job_id); sync align!;  };
}

process JobProvider3() {
const int job_id = 3;
state
    Idle {time <= jobPreheatTime(job_id)},
    Available {time <= jobStopTime(job_id)},
    PreHeat {time <= jobStartTime(job_id)};
init Idle;
trans
    Idle -> PreHeat { guard time == jobPreheatTime(job_id); sync preHeat[job_id]!; assign new_time = jobPreheatTime(job_id);  },
    PreHeat -> Available { guard time == jobStartTime(job_id); sync available[job_id]!;  },
    Available -> Idle { guard time == jobStopTime(job_id); sync not_available[job_id]!; assign nextJob(job_id);  };
}

process Battery() {
power_t load = 0;

time_t start , stop;
time_t old_time = 0;
void update(const int job_id){
    load = bg_load;

    battery -= load * (old_time - new_time);
   
    start = jobStartTime(ind[job_id]-1);
    stop = jobStopTime(ind[job_id]-1);
    if(insolation){
        if (sun_transition >= start){
            battery += sun_power_by_att[job_att[job_id]] * (stop - sun_transition);
        }
        else if(sun_transition <= old_time){
            battery += sun_power_by_att[job_att[job_id]] * (stop-start);
            battery += sun_power_by_att[0]*(start - old_time);
        }
        else{
            battery += sun_power_by_att[job_att[job_id]] * (stop-start);
            battery += sun_power_by_att[0]*(start - sun_transition);
        }
        battery += sun_power_by_att[0] * (new_time - stop);
    }
    else{
        if (sun_transition >= start){
            battery += sun_power_by_att[job_att[job_id]] * (sun_transition - start);
            battery += sun_power_by_att[0] * (sun_transition - start);
        }
        else if(sun_transition <= old_time){
            //no sun over the period
        }
        else{
            battery += sun_power_by_att[0]*(sun_transition - old_time);
        }
    }

    battery -= job_load[job_id]*(stop - start);
    if(slewed) battery -= slew_load*slewing_time[job_id]*2;

    battery -= preheat_load*preheat_time[job_id];
        
    if (battery > max_cap){
        battery = max_cap;
    }
    stop_time = new_time;
}
state
    Init,
    Check,
    Depletion,
    Idle;
commit
    Init,
    Check,
    Depletion;
init Init;
trans
    Init -> Idle {  },
    Idle -> Check { select job_id : int; sync bUpdate[job_id]?; assign update(job_id);  },
    Check -> Idle { guard battery > min_cap;  },
    Check -> Depletion { guard battery <= min_cap;  };
}

process Sun() {

state
    Insolation {time <= stop_sun[i_sun]},
    Eclipse {time <= start_sun[i_sun]},
    Init;
commit
    Init;
init Init;
trans
    Insolation -> Eclipse { guard time == stop_sun[i_sun]; assign setEclipse();  },
    Init -> Insolation { guard start_sun[0] == 0; assign startInsolation();  },
    Eclipse -> Insolation { assign setInsolation();  },
    Init -> Eclipse { guard start_sun[0] > 0; assign startEclipse();  };
}

process End_simulation() {

state
    Running {time <= stop_simulation},
    Lock;
commit
    Lock;
init Running;
trans
    Running -> Lock { guard time == stop_simulation; sync bUpdate[4]!; assign new_time = stop_simulation;  };
}

process ADCS() {

state
    End,
    Slewing {time<=slewing_end},
    Idle;
init Idle;
trans
    End -> Idle { sync reached!;  },
    Slewing -> End { guard time == slewing_end;  },
    Idle -> Slewing { sync align!; assign startSlewing();  };
}
Jb0 = Job0();
JbP0 = JobProvider0();
Jb1 = Job1();
JbP1 = JobProvider1();
Jb2 = Job2();
JbP2 = JobProvider2();
Jb3 = Job3();
JbP3 = JobProvider3();

B = Battery();
End_S = End_simulation();
ADC = ADCS();

// List one or more processes to be composed into a system.
system Jb0, JbP0, Jb1, JbP1, Jb2, JbP2, Jb3, JbP3, B, End_S, ADC;