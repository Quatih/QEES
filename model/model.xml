<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
clock time;
typedef int[-10000000, 10000000] time_t;
typedef int[-100000, 200000] power_t;
typedef int[0, 6000000000] battery_t;



const power_t bg_load = 2989;
const battery_t max_cap = 149760000;
const battery_t force_at_bat = 134784000;
battery_t battery = 119808000;

const battery_t min_cap = 59904000;
const power_t max_load = 15000;

const time_t stop_simulation = 65*60*60; // period of the whole current time period.

time_t slewing_end = 0;
time_t preheat_end = 0;
time_t sun_transition = 0;

const int job_ids = 4; 
time_t curr_time = 0;
time_t old_time = 0;

// L1-Band, L2-Band, X-Band, UHF, dummy
typedef int[0, job_ids-1] id_t;

const power_t job_load[job_ids] = {3863, 3863, 11945, 2630};
const power_t slew_load = 414;
const power_t preheat_load = 414;

const int preheat_job[job_ids] = {1, 1, 0, 0};
const int slew_job[job_ids] = {1, 1, 1, 0};

const int no_att = 3; //default = 0, l1/l2 = 1, x = 2
typedef int[0, no_att-1] att_t;
const att_t job_att[job_ids] = {1, 1, 2, 0}; // UHF is attitude agnostic

int curr_att = 0;
const power_t sun_power_by_att[att_t] = {5700, 6100, 5700};

bool slewed = false;
bool insolation = false;
bool preheating = false;
chan check[job_ids], preheat[job_ids], available[job_ids], not_available[job_ids], finish[job_ids], align[job_ids];
chan schedule[job_ids], skip[job_ids];
chan reached, bUpdate, preheated;
// length of sun times
const int l_sun = 43;
// The start and stop times of each insolation period
const time_t start_sun[l_sun] = {1151, 6655, 12159, 17663, 23168, 28672, 34176, 39680, 45184, 50688, 56192, 61696, 67200, 72705, 78209, 83713, 89217, 94721, 100226, 105730, 111234, 116738, 122242, 127747, 133251, 138755, 144260, 149764, 155268, 160773, 166277, 171781, 177286, 182790, 188295, 193799, 199304, 204808, 210313, 215818, 221322, 226827, 232332 };
const time_t stop_sun[l_sun] = {4620, 10127, 15633, 21140, 26646, 32153, 37660, 43167, 48673, 54180, 59687, 65194, 70701, 76208, 81715, 87222, 92729, 98236, 103743, 109250, 114757, 120265, 125772, 131279, 136786, 142294, 147801, 153309, 158816, 164324, 169831, 175339, 180846, 186354, 191862, 197369, 202877, 208385, 213893, 219401, 224909, 230417, 235925 };
int i_sun = 0;

const int l_x = 24;
//const time_t start_x[l_x] = {6837, 23916, 29751, 60592, 65340, 66202, 70973, 71954, 77737, 83484, 89215, 95054, 106372, 112047, 148622, 153366, 154327, 159207, 160108, 165873, 171604, 177362, 194425, 200321 };
//const time_t stop_x[l_x] = {7354, 24504, 30099, 61025, 65751, 66803, 71549, 72532, 78291, 84075, 89800, 95322, 106842, 112605, 149188, 153954, 154924, 159559, 160664, 166444, 172208, 177852, 195021, 200556 };

const int l_l1 = 38;
//const time_t start_l1[l_l1] = {5367, 11204, 16951, 22674, 28430, 34307, 40374, 46421, 52289, 58049, 63772, 69513, 75349, 81376, 87459, 93369, 99149, 104876, 110608, 116414, 122392, 128487, 134437, 140238, 145971, 151696, 157475, 163402, 169496, 175495, 181325, 187070, 192792, 198552, 204435, 210504, 216541, 222402 };
//const time_t stop_l1[l_l1] = {10937, 16774, 22521, 28244, 34000, 39877, 45944, 51991, 57859, 63619, 69342, 75083, 80919, 86946, 93029, 98939, 104719, 110446, 116178, 121984, 127962, 134057, 140007, 145808, 151541, 157266, 163045, 168972, 175066, 181065, 186895, 192640, 198362, 204122, 210005, 216074, 222111, 227972 };

const int l_l2 = 39;
//const time_t start_l2[l_l2] = {2707, 8521, 14261, 19986, 25756, 31664, 37749, 43768, 49614, 55366, 61090, 66845, 72711, 78765, 84817, 90695, 96462, 102187, 107928, 113757, 119768, 125851, 131771, 137558, 143288, 149021, 154821, 160786, 166875, 172835, 178644, 184381, 190108, 195884, 201800, 207883, 213889, 219727, 225477 };
//const time_t stop_l2[l_l2] = {8277, 14091, 19831, 25556, 31326, 37234, 43319, 49338, 55184, 60936, 66660, 72415, 78281, 84335, 90387, 96265, 102032, 107757, 113498, 119327, 125338, 131421, 137341, 143128, 148858, 154591, 160391, 166356, 172445, 178405, 184214, 189951, 195678, 201454, 207370, 213453, 219459, 225297, 231047 };

const int l_uhf = 11;
//const time_t start_uhf[l_uhf] = {60917, 66429, 72087, 77787, 83507, 89317, 148887, 154504, 160190, 165900, 171645 };
//const time_t stop_uhf[l_uhf] = {61141, 66947, 72667, 78366, 84023, 89530, 149330, 155067, 160775, 166457, 172058 };
typedef int[0,l_l1+l_l2+l_x+l_uhf] ind_t;
ind_t offsets[job_ids] = {0, l_l1, l_l1+l_l2, l_l1+l_l2+l_x};
ind_t end[job_ids] = { l_l1, l_l1+l_l2, l_l1+l_l2+l_x, l_l1+l_l2+l_x+l_uhf};
bool running[job_ids] = {false, false, false, false};
bool executing[job_ids] = {false, false, false, false};
int job_count[job_ids] = {0,0,0,0};

int cost_rates[job_ids] = {5,5,20,100};
const time_t start_times[l_l1+l_l2+l_x+l_uhf+1] = 
{
5367, 11204, 16951, 22674, 28430, 34307, 40374, 46421, 52289, 58049, 63772, 69513, 75349, 81376, 87459, 93369, 99149, 104876, 110608, 116414, 122392, 128487, 134437, 140238, 145971, 151696, 157475, 163402, 169496, 175495, 181325, 187070, 192792, 198552, 204435, 210504, 216541, 222402,
2707, 8521, 14261, 19986, 25756, 31664, 37749, 43768, 49614, 55366, 61090, 66845, 72711, 78765, 84817, 90695, 96462, 102187, 107928, 113757, 119768, 125851, 131771, 137558, 143288, 149021, 154821, 160786, 166875, 172835, 178644, 184381, 190108, 195884, 201800, 207883, 213889, 219727, 225477,
6837, 23916, 29751, 60592, 65340, 66202, 70973, 71954, 77737, 83484, 89215, 95054, 106372, 112047, 148622, 153366, 154327, 159207, 160108, 165873, 171604, 177362, 194425, 200321,
60917, 66429, 72087, 77787, 83507, 89317, 148887, 154504, 160190, 165900, 171645, stop_simulation*2
};
const time_t stop_times[l_l1+l_l2+l_x+l_uhf+1] = 
{
10937, 16774, 22521, 28244, 34000, 39877, 45944, 51991, 57859, 63619, 69342, 75083, 80919, 86946, 93029, 98939, 104719, 110446, 116178, 121984, 127962, 134057, 140007, 145808, 151541, 157266, 163045, 168972, 175066, 181065, 186895, 192640, 198362, 204122, 210005, 216074, 222111, 227972,
8277, 14091, 19831, 25556, 31326, 37234, 43319, 49338, 55184, 60936, 66660, 72415, 78281, 84335, 90387, 96265, 102032, 107757, 113498, 119327, 125338, 131421, 137341, 143128, 148858, 154591, 160391, 166356, 172445, 178405, 184214, 189951, 195678, 201454, 207370, 213453, 219459, 225297, 231047,
7354, 24504, 30099, 61025, 65751, 66803, 71549, 72532, 78291, 84075, 89800, 95322, 106842, 112605, 149188, 153954, 154924, 159559, 160664, 166444, 172208, 177852, 195021, 200556,
61141, 66947, 72667, 78366, 84023, 89530, 149330, 155067, 160775, 166457, 172058, stop_simulation*2
};


// heuristic variables for l and x band ratios 
int r = 0;
const int r_l = 1;
const int r_x = 2;

const time_t preheat_time[job_ids] = {
  20*60,// L1-band
  20*60,// L2-band
  0,// X-band
  0//UHF
};

const time_t slewing_time[job_ids] = {
  10*60,// L1-band
  10*60,// L2-band
  10*60,// X-band
  0//UHF
};

time_t jobStartTime(const id_t job_id){
//   if (job_id == 0) return start_l1[ind[job_id]];
//   if (job_id == 1) return start_l2[ind[job_id]];
//   if (job_id == 2) return start_x[ind[job_id]];
//   if (job_id == 3) return start_uhf[ind[job_id]];
    return start_times[offsets[job_id]];
}

time_t jobStopTime(const id_t job_id){
//   if (job_id == 0) return stop_l1[ind[job_id]];
//   if (job_id == 1) return stop_l2[ind[job_id]];
//   if (job_id == 2) return stop_x[ind[job_id]];
//   if (job_id == 3) return stop_uhf[ind[job_id]];
    return stop_times[offsets[job_id]];
}

time_t jobSlewTime(const id_t job_id){
  // take slewing time into consideration
  return jobStartTime(job_id) - slewing_time[job_id];
}

time_t jobPreheatTime(const id_t job_id){
  // take slewing time into consideration
  return jobSlewTime(job_id) - preheat_time[job_id];
}


void nextJob(const id_t job_id){
  offsets[job_id]++;
}

bool skipable(const id_t job_id){ 
  if (job_id == 3) return false; // force UHF to execute if able
  // force at a specific battery level
  //if (battery &gt;= force_at_bat) return false;
  return true;
}

void run(const id_t job_id){
  running[job_id] = true;
}

void endRun(const id_t job_id){
  running[job_id] = false;
}

void startJob(const id_t job_id){
  executing[job_id] = true;
  if (job_id &lt; 2) r = r + r_x;//L band
  if (job_id == 2) r = r - r_l; //X-band
}

void stopJob(const id_t job_id){
  executing[job_id] = false;
  job_count[job_id] = job_count[job_id] + 1;
}

bool job_possible(const id_t job_id){
  // heuristics
  for (id:id_t){
      if(running[id]) return false;
  }
  if(job_id == 3) return true; // prioritize UHF


  if((job_id == 2) &amp;&amp; (r &gt;= r_l)) return true; // x-band
  if((job_id &lt;2) &amp;&amp; (r &lt; (r_x+r_l)*r_l)) return true; // l-band
  // allow at a battery level
  //if (battery &gt;= force_at_bat) return true;
  return false;
}

bool isAligned(const id_t job_id){
  if (job_att[job_id] == curr_att) return true;
  return false;
}

bool isHeated(const id_t job_id){
  return preheat_time[job_id] &gt; 0 ? false : true;
}

bool hasToSlewBack(const id_t job_id){
  if(job_att[job_id] == 0 ) return false;
  if(job_att[job_id] == -1 ) return false;
  return true; 
}

void startPreheat(const id_t job_id){
  preheating = true;
  preheat_end = jobSlewTime(job_id);
  curr_time = jobPreheatTime(job_id);
}

void stopPreheat(){
  preheating = false;
  curr_time = preheat_end;
}

void startSlewing(const id_t job_id){
    slewed = true;;
    // curr_time already updated by the job provider
    slewing_end = curr_time + slewing_time[job_id];
} 

void stopSlewing(){
    slewed = false;
    curr_time = slewing_end;
} 

void startInsolation(){
    insolation = true;
}

void startEclipse(){
    insolation = false;
}

void setInsolation(){
    insolation = true;
}

void setEclipse(){
    insolation = false;
    i_sun++;
}</declaration><template><name>Job0</name><declaration>const id_t job_id = 0;</declaration><location id="id0" x="-32" y="208"><name x="-112" y="200">Precheck</name><committed/></location><location id="id1" x="-32" y="72"><name x="-42" y="42">Preheat</name></location><location id="id2" x="392" y="88"><name x="382" y="58">Start</name></location><location id="id3" x="-32" y="360"><name x="-72" y="328">Schedule</name><committed/></location><location id="id4" x="328" y="360"><name x="312" y="376">End</name><committed/></location><location id="id5" x="520" y="88"><name x="536" y="80">Stop</name><committed/></location><location id="id6" x="160" y="464"><name x="184" y="456">Skip</name><committed/></location><location id="id7" x="520" y="360"><name x="496" y="368">SlewingBack</name></location><location id="id8" x="520" y="208"><name x="536" y="208">Check_Attitude</name><committed/></location><location id="id9" x="392" y="208"><name x="376" y="216">Available</name><committed/></location><location id="id10" x="160" y="360"><name x="152" y="328">Idle</name></location><location id="id11" x="104" y="208"><name x="88" y="216">Align</name><committed/></location><location id="id12" x="248" y="72"><name x="176" y="56">Slewing</name></location><location id="id13" x="248" y="208"><name x="208" y="232">Correct_Attitude</name></location><init ref="id10"/><transition><source ref="id7"/><target ref="id4"/><label kind="synchronisation" x="392" y="336">reached?</label></transition><transition><source ref="id12"/><target ref="id13"/><label kind="synchronisation" x="256" y="104">reached?</label></transition><transition><source ref="id0"/><target ref="id11"/><label kind="guard" x="-16" y="208">isHeated(job_id)</label></transition><transition><source ref="id1"/><target ref="id11"/><label kind="synchronisation" x="24" y="96">preheated?</label></transition><transition><source ref="id0"/><target ref="id1"/><label kind="guard" x="-144" y="152">!isHeated(job_id)</label><label kind="synchronisation" x="-144" y="136">preheat[job_id]!</label></transition><transition><source ref="id3"/><target ref="id0"/><label kind="synchronisation" x="-152" y="296">schedule[job_id]!</label></transition><transition><source ref="id2"/><target ref="id5"/><label kind="synchronisation" x="416" y="41">not_available[job_id]?</label><label kind="assignment" x="416" y="56">stopJob(job_id)</label></transition><transition><source ref="id9"/><target ref="id2"/><label kind="synchronisation" x="328" y="128">bUpdate!</label></transition><transition><source ref="id8"/><target ref="id4"/><label kind="guard" x="336" y="264">!hasToSlewBack(job_id)</label><nail x="504" y="288"/><nail x="336" y="288"/></transition><transition><source ref="id6"/><target ref="id10"/><label kind="synchronisation" x="56" y="464">skip[job_id]!</label><label kind="assignment" x="56" y="480">cost+=
cost_rates[job_id]</label><nail x="64" y="464"/></transition><transition><source ref="id10"/><target ref="id3"/><label kind="guard" x="8" y="306">job_possible(job_id)</label><label kind="synchronisation" x="8" y="320">check[job_id]?</label><label kind="assignment" x="8" y="336">run(job_id)</label></transition><transition><source ref="id13"/><target ref="id9"/><label kind="synchronisation" x="272" y="168">available[job_id]?</label><label kind="assignment" x="272" y="184">startJob(job_id)</label></transition><transition><source ref="id4"/><target ref="id10"/><label kind="synchronisation" x="200" y="320">finish[job_id]!</label><label kind="assignment" x="200" y="336">endRun(job_id)</label></transition><transition><source ref="id5"/><target ref="id8"/><label kind="synchronisation" x="528" y="136">bUpdate!</label></transition><transition><source ref="id10"/><target ref="id6"/><label kind="guard" x="168" y="400">skipable(job_id)</label><label kind="synchronisation" x="168" y="416">check[job_id]?</label></transition><transition><source ref="id8"/><target ref="id7"/><label kind="guard" x="528" y="288">hasToSlewBack(job_id)</label><label kind="synchronisation" x="528" y="264">align[job_id]!</label></transition><transition><source ref="id11"/><target ref="id13"/><label kind="guard" x="120" y="208">isAligned(job_id)</label></transition><transition><source ref="id11"/><target ref="id12"/><label kind="guard" x="112" y="128">!isAligned(job_id)</label><label kind="synchronisation" x="112" y="144">align[job_id]!</label></transition></template><template><name>JobProvider0</name><declaration>const id_t job_id = 0;</declaration><location id="id14" x="128" y="360"><name x="104" y="376">PreHeat</name><label kind="invariant" x="0" y="392">time &lt;= jobStartTime(job_id) - slewing_time[job_id]</label></location><location id="id15" x="144" y="-24"><name x="134" y="-54">Wait</name></location><location id="id16" x="-208" y="224"><name x="-304" y="216">Check_end</name><committed/></location><location id="id17" x="-208" y="96"><name x="-256" y="88">End</name></location><location id="id18" x="-208" y="-24"><name x="-224" y="-56">Missed</name><committed/></location><location id="id19" x="-16" y="-24"><name x="-8" y="-16">Next</name><committed/></location><location id="id20" x="-16" y="224"><name x="-32" y="232">Action</name></location><location id="id21" x="-16" y="96"><name x="0" y="80">Idle</name><label kind="invariant" x="-8" y="104">time &lt;= jobPreheatTime(job_id)</label></location><location id="id22" x="280" y="96"><name x="288" y="64">Available</name><label kind="invariant" x="296" y="88">time&lt;=jobStopTime(job_id)</label></location><location id="id23" x="280" y="224"><name x="296" y="216">Slew</name><label kind="invariant" x="288" y="232">time &lt;= jobStartTime(job_id)</label></location><init ref="id21"/><transition><source ref="id14"/><target ref="id23"/><label kind="guard" x="232" y="280">time == jobStartTime(job_id) - slewing_time[job_id]</label><label kind="assignment" x="232" y="296">curr_time = jobStartTime(job_id) - slewing_time[job_id]</label></transition><transition><source ref="id20"/><target ref="id14"/><label kind="synchronisation" x="-136" y="297">schedule[job_id]?</label><label kind="assignment" x="-136" y="312">curr_time = jobPreheatTime(job_id)</label></transition><transition><source ref="id15"/><target ref="id19"/><label kind="synchronisation" x="16" y="-63">finish[job_id]?</label><label kind="assignment" x="16" y="-48">nextJob(job_id)</label></transition><transition><source ref="id22"/><target ref="id15"/><label kind="guard" x="208" y="-22">time == jobStopTime(job_id)</label><label kind="synchronisation" x="208" y="-7">not_available[job_id]!</label><label kind="assignment" x="208" y="8">curr_time = jobStopTime(job_id)</label></transition><transition><source ref="id16"/><target ref="id21"/><label kind="guard" x="-200" y="136">offsets[job_id] &lt; end[job_id]</label></transition><transition><source ref="id16"/><target ref="id17"/><label kind="guard" x="-392" y="160">offsets[job_id] == end[job_id]</label></transition><transition><source ref="id20"/><target ref="id16"/><label kind="synchronisation" x="-160" y="224">skip[job_id]?</label><label kind="assignment" x="-160" y="240">nextJob(job_id)</label></transition><transition><source ref="id18"/><target ref="id19"/><label kind="assignment" x="-160" y="-48">nextJob(job_id)</label></transition><transition><source ref="id19"/><target ref="id17"/><label kind="guard" x="-320" y="0">offsets[job_id] == end[job_id]</label></transition><transition><source ref="id19"/><target ref="id21"/><label kind="guard" x="-16" y="24">offsets[job_id] &lt; end[job_id] &amp;&amp;
time &lt;=jobPreheatTime(job_id)</label></transition><transition><source ref="id19"/><target ref="id18"/><label kind="guard" x="-192" y="-120">time &gt; jobPreheatTime(job_id) &amp;&amp; 
offsets[job_id] &lt; end[job_id]</label><nail x="-96" y="-80"/></transition><transition><source ref="id21"/><target ref="id20"/><label kind="guard" x="-8" y="129">time == jobPreheatTime(job_id)</label><label kind="synchronisation" x="-8" y="144">check[job_id]!</label></transition><transition><source ref="id23"/><target ref="id22"/><label kind="guard" x="288" y="136">time == jobStartTime(job_id)</label><label kind="synchronisation" x="288" y="152">available[job_id]!</label><label kind="assignment" x="288" y="168">curr_time = jobStartTime(job_id)</label></transition></template><template><name>Job1</name><declaration>const id_t job_id = 1;</declaration><location id="id24" x="-32" y="208"><name x="-112" y="200">Precheck</name><committed/></location><location id="id25" x="-32" y="72"><name x="-42" y="42">Preheat</name></location><location id="id26" x="392" y="88"><name x="382" y="58">Start</name></location><location id="id27" x="-32" y="360"><name x="-72" y="328">Schedule</name><committed/></location><location id="id28" x="328" y="360"><name x="312" y="376">End</name><committed/></location><location id="id29" x="520" y="88"><name x="536" y="80">Stop</name><committed/></location><location id="id30" x="160" y="464"><name x="184" y="456">Skip</name><committed/></location><location id="id31" x="520" y="360"><name x="496" y="368">SlewingBack</name></location><location id="id32" x="520" y="208"><name x="536" y="208">Check_Attitude</name><committed/></location><location id="id33" x="392" y="208"><name x="376" y="216">Available</name><committed/></location><location id="id34" x="160" y="360"><name x="152" y="328">Idle</name></location><location id="id35" x="104" y="208"><name x="88" y="216">Align</name><committed/></location><location id="id36" x="248" y="72"><name x="176" y="56">Slewing</name></location><location id="id37" x="248" y="208"><name x="208" y="232">Correct_Attitude</name></location><init ref="id34"/><transition><source ref="id31"/><target ref="id28"/><label kind="synchronisation" x="392" y="336">reached?</label></transition><transition><source ref="id36"/><target ref="id37"/><label kind="synchronisation" x="256" y="104">reached?</label></transition><transition><source ref="id24"/><target ref="id35"/><label kind="guard" x="-16" y="208">isHeated(job_id)</label></transition><transition><source ref="id25"/><target ref="id35"/><label kind="synchronisation" x="24" y="96">preheated?</label></transition><transition><source ref="id24"/><target ref="id25"/><label kind="guard" x="-144" y="152">!isHeated(job_id)</label><label kind="synchronisation" x="-144" y="136">preheat[job_id]!</label></transition><transition><source ref="id27"/><target ref="id24"/><label kind="synchronisation" x="-152" y="296">schedule[job_id]!</label></transition><transition><source ref="id26"/><target ref="id29"/><label kind="synchronisation" x="416" y="41">not_available[job_id]?</label><label kind="assignment" x="416" y="56">stopJob(job_id)</label></transition><transition><source ref="id33"/><target ref="id26"/><label kind="synchronisation" x="328" y="128">bUpdate!</label></transition><transition><source ref="id32"/><target ref="id28"/><label kind="guard" x="336" y="264">!hasToSlewBack(job_id)</label><nail x="504" y="288"/><nail x="336" y="288"/></transition><transition><source ref="id30"/><target ref="id34"/><label kind="synchronisation" x="56" y="464">skip[job_id]!</label><label kind="assignment" x="56" y="480">cost+=
cost_rates[job_id]</label><nail x="64" y="464"/></transition><transition><source ref="id34"/><target ref="id27"/><label kind="guard" x="8" y="306">job_possible(job_id)</label><label kind="synchronisation" x="8" y="320">check[job_id]?</label><label kind="assignment" x="8" y="336">run(job_id)</label></transition><transition><source ref="id37"/><target ref="id33"/><label kind="synchronisation" x="272" y="168">available[job_id]?</label><label kind="assignment" x="272" y="184">startJob(job_id)</label></transition><transition><source ref="id28"/><target ref="id34"/><label kind="synchronisation" x="200" y="320">finish[job_id]!</label><label kind="assignment" x="200" y="336">endRun(job_id)</label></transition><transition><source ref="id29"/><target ref="id32"/><label kind="synchronisation" x="528" y="136">bUpdate!</label></transition><transition><source ref="id34"/><target ref="id30"/><label kind="guard" x="168" y="400">skipable(job_id)</label><label kind="synchronisation" x="168" y="416">check[job_id]?</label></transition><transition><source ref="id32"/><target ref="id31"/><label kind="guard" x="528" y="288">hasToSlewBack(job_id)</label><label kind="synchronisation" x="528" y="264">align[job_id]!</label></transition><transition><source ref="id35"/><target ref="id37"/><label kind="guard" x="120" y="208">isAligned(job_id)</label></transition><transition><source ref="id35"/><target ref="id36"/><label kind="guard" x="112" y="128">!isAligned(job_id)</label><label kind="synchronisation" x="112" y="144">align[job_id]!</label></transition></template><template><name>JobProvider1</name><declaration>const id_t job_id = 1;</declaration><location id="id38" x="128" y="360"><name x="104" y="376">PreHeat</name><label kind="invariant" x="0" y="392">time &lt;= jobStartTime(job_id) - slewing_time[job_id]</label></location><location id="id39" x="144" y="-24"><name x="134" y="-54">Wait</name></location><location id="id40" x="-208" y="224"><name x="-304" y="216">Check_end</name><committed/></location><location id="id41" x="-208" y="96"><name x="-256" y="88">End</name></location><location id="id42" x="-208" y="-24"><name x="-224" y="-56">Missed</name><committed/></location><location id="id43" x="-16" y="-24"><name x="-8" y="-16">Next</name><committed/></location><location id="id44" x="-16" y="224"><name x="-32" y="232">Action</name></location><location id="id45" x="-16" y="96"><name x="0" y="80">Idle</name><label kind="invariant" x="-8" y="104">time &lt;= jobPreheatTime(job_id)</label></location><location id="id46" x="280" y="96"><name x="288" y="64">Available</name><label kind="invariant" x="296" y="88">time&lt;=jobStopTime(job_id)</label></location><location id="id47" x="280" y="224"><name x="296" y="216">Slew</name><label kind="invariant" x="288" y="232">time &lt;= jobStartTime(job_id)</label></location><init ref="id45"/><transition><source ref="id38"/><target ref="id47"/><label kind="guard" x="232" y="280">time == jobStartTime(job_id) - slewing_time[job_id]</label><label kind="assignment" x="232" y="296">curr_time = jobStartTime(job_id) - slewing_time[job_id]</label></transition><transition><source ref="id44"/><target ref="id38"/><label kind="synchronisation" x="-136" y="297">schedule[job_id]?</label><label kind="assignment" x="-136" y="312">curr_time = jobPreheatTime(job_id)</label></transition><transition><source ref="id39"/><target ref="id43"/><label kind="synchronisation" x="16" y="-63">finish[job_id]?</label><label kind="assignment" x="16" y="-48">nextJob(job_id)</label></transition><transition><source ref="id46"/><target ref="id39"/><label kind="guard" x="208" y="-22">time == jobStopTime(job_id)</label><label kind="synchronisation" x="208" y="-7">not_available[job_id]!</label><label kind="assignment" x="208" y="8">curr_time = jobStopTime(job_id)</label></transition><transition><source ref="id40"/><target ref="id45"/><label kind="guard" x="-200" y="136">offsets[job_id] &lt; end[job_id]</label></transition><transition><source ref="id40"/><target ref="id41"/><label kind="guard" x="-392" y="160">offsets[job_id] == end[job_id]</label></transition><transition><source ref="id44"/><target ref="id40"/><label kind="synchronisation" x="-160" y="224">skip[job_id]?</label><label kind="assignment" x="-160" y="240">nextJob(job_id)</label></transition><transition><source ref="id42"/><target ref="id43"/><label kind="assignment" x="-160" y="-48">nextJob(job_id)</label></transition><transition><source ref="id43"/><target ref="id41"/><label kind="guard" x="-320" y="0">offsets[job_id] == end[job_id]</label></transition><transition><source ref="id43"/><target ref="id45"/><label kind="guard" x="-16" y="24">offsets[job_id] &lt; end[job_id] &amp;&amp;
time &lt;=jobPreheatTime(job_id)</label></transition><transition><source ref="id43"/><target ref="id42"/><label kind="guard" x="-192" y="-120">time &gt; jobPreheatTime(job_id) &amp;&amp; 
offsets[job_id] &lt; end[job_id]</label><nail x="-96" y="-80"/></transition><transition><source ref="id45"/><target ref="id44"/><label kind="guard" x="-8" y="129">time == jobPreheatTime(job_id)</label><label kind="synchronisation" x="-8" y="144">check[job_id]!</label></transition><transition><source ref="id47"/><target ref="id46"/><label kind="guard" x="288" y="136">time == jobStartTime(job_id)</label><label kind="synchronisation" x="288" y="152">available[job_id]!</label><label kind="assignment" x="288" y="168">curr_time = jobStartTime(job_id)</label></transition></template><template><name>Job2</name><declaration>const id_t job_id = 2;</declaration><location id="id48" x="-32" y="208"><name x="-112" y="200">Precheck</name><committed/></location><location id="id49" x="-32" y="72"><name x="-42" y="42">Preheat</name></location><location id="id50" x="392" y="88"><name x="382" y="58">Start</name></location><location id="id51" x="-32" y="360"><name x="-72" y="328">Schedule</name><committed/></location><location id="id52" x="328" y="360"><name x="312" y="376">End</name><committed/></location><location id="id53" x="520" y="88"><name x="536" y="80">Stop</name><committed/></location><location id="id54" x="160" y="464"><name x="184" y="456">Skip</name><committed/></location><location id="id55" x="520" y="360"><name x="496" y="368">SlewingBack</name></location><location id="id56" x="520" y="208"><name x="536" y="208">Check_Attitude</name><committed/></location><location id="id57" x="392" y="208"><name x="376" y="216">Available</name><committed/></location><location id="id58" x="160" y="360"><name x="152" y="328">Idle</name></location><location id="id59" x="104" y="208"><name x="88" y="216">Align</name><committed/></location><location id="id60" x="248" y="72"><name x="176" y="56">Slewing</name></location><location id="id61" x="248" y="208"><name x="208" y="232">Correct_Attitude</name></location><init ref="id58"/><transition><source ref="id55"/><target ref="id52"/><label kind="synchronisation" x="392" y="336">reached?</label></transition><transition><source ref="id60"/><target ref="id61"/><label kind="synchronisation" x="256" y="104">reached?</label></transition><transition><source ref="id48"/><target ref="id59"/><label kind="guard" x="-16" y="208">isHeated(job_id)</label></transition><transition><source ref="id49"/><target ref="id59"/><label kind="synchronisation" x="24" y="96">preheated?</label></transition><transition><source ref="id48"/><target ref="id49"/><label kind="guard" x="-144" y="152">!isHeated(job_id)</label><label kind="synchronisation" x="-144" y="136">preheat[job_id]!</label></transition><transition><source ref="id51"/><target ref="id48"/><label kind="synchronisation" x="-152" y="296">schedule[job_id]!</label></transition><transition><source ref="id50"/><target ref="id53"/><label kind="synchronisation" x="416" y="41">not_available[job_id]?</label><label kind="assignment" x="416" y="56">stopJob(job_id)</label></transition><transition><source ref="id57"/><target ref="id50"/><label kind="synchronisation" x="328" y="128">bUpdate!</label></transition><transition><source ref="id56"/><target ref="id52"/><label kind="guard" x="336" y="264">!hasToSlewBack(job_id)</label><nail x="504" y="288"/><nail x="336" y="288"/></transition><transition><source ref="id54"/><target ref="id58"/><label kind="synchronisation" x="56" y="464">skip[job_id]!</label><label kind="assignment" x="56" y="480">cost+=
cost_rates[job_id]</label><nail x="64" y="464"/></transition><transition><source ref="id58"/><target ref="id51"/><label kind="guard" x="8" y="306">job_possible(job_id)</label><label kind="synchronisation" x="8" y="320">check[job_id]?</label><label kind="assignment" x="8" y="336">run(job_id)</label></transition><transition><source ref="id61"/><target ref="id57"/><label kind="synchronisation" x="272" y="168">available[job_id]?</label><label kind="assignment" x="272" y="184">startJob(job_id)</label></transition><transition><source ref="id52"/><target ref="id58"/><label kind="synchronisation" x="200" y="320">finish[job_id]!</label><label kind="assignment" x="200" y="336">endRun(job_id)</label></transition><transition><source ref="id53"/><target ref="id56"/><label kind="synchronisation" x="528" y="136">bUpdate!</label></transition><transition><source ref="id58"/><target ref="id54"/><label kind="guard" x="168" y="400">skipable(job_id)</label><label kind="synchronisation" x="168" y="416">check[job_id]?</label></transition><transition><source ref="id56"/><target ref="id55"/><label kind="guard" x="528" y="288">hasToSlewBack(job_id)</label><label kind="synchronisation" x="528" y="264">align[job_id]!</label></transition><transition><source ref="id59"/><target ref="id61"/><label kind="guard" x="120" y="208">isAligned(job_id)</label></transition><transition><source ref="id59"/><target ref="id60"/><label kind="guard" x="112" y="128">!isAligned(job_id)</label><label kind="synchronisation" x="112" y="144">align[job_id]!</label></transition></template><template><name>JobProvider2</name><declaration>const id_t job_id = 2;</declaration><location id="id62" x="128" y="360"><name x="104" y="376">PreHeat</name><label kind="invariant" x="0" y="392">time &lt;= jobStartTime(job_id) - slewing_time[job_id]</label></location><location id="id63" x="144" y="-24"><name x="134" y="-54">Wait</name></location><location id="id64" x="-208" y="224"><name x="-304" y="216">Check_end</name><committed/></location><location id="id65" x="-208" y="96"><name x="-256" y="88">End</name></location><location id="id66" x="-208" y="-24"><name x="-224" y="-56">Missed</name><committed/></location><location id="id67" x="-16" y="-24"><name x="-8" y="-16">Next</name><committed/></location><location id="id68" x="-16" y="224"><name x="-32" y="232">Action</name></location><location id="id69" x="-16" y="96"><name x="0" y="80">Idle</name><label kind="invariant" x="-8" y="104">time &lt;= jobPreheatTime(job_id)</label></location><location id="id70" x="280" y="96"><name x="288" y="64">Available</name><label kind="invariant" x="296" y="88">time&lt;=jobStopTime(job_id)</label></location><location id="id71" x="280" y="224"><name x="296" y="216">Slew</name><label kind="invariant" x="288" y="232">time &lt;= jobStartTime(job_id)</label></location><init ref="id69"/><transition><source ref="id62"/><target ref="id71"/><label kind="guard" x="232" y="280">time == jobStartTime(job_id) - slewing_time[job_id]</label><label kind="assignment" x="232" y="296">curr_time = jobStartTime(job_id) - slewing_time[job_id]</label></transition><transition><source ref="id68"/><target ref="id62"/><label kind="synchronisation" x="-136" y="297">schedule[job_id]?</label><label kind="assignment" x="-136" y="312">curr_time = jobPreheatTime(job_id)</label></transition><transition><source ref="id63"/><target ref="id67"/><label kind="synchronisation" x="16" y="-63">finish[job_id]?</label><label kind="assignment" x="16" y="-48">nextJob(job_id)</label></transition><transition><source ref="id70"/><target ref="id63"/><label kind="guard" x="208" y="-22">time == jobStopTime(job_id)</label><label kind="synchronisation" x="208" y="-7">not_available[job_id]!</label><label kind="assignment" x="208" y="8">curr_time = jobStopTime(job_id)</label></transition><transition><source ref="id64"/><target ref="id69"/><label kind="guard" x="-200" y="136">offsets[job_id] &lt; end[job_id]</label></transition><transition><source ref="id64"/><target ref="id65"/><label kind="guard" x="-392" y="160">offsets[job_id] == end[job_id]</label></transition><transition><source ref="id68"/><target ref="id64"/><label kind="synchronisation" x="-160" y="224">skip[job_id]?</label><label kind="assignment" x="-160" y="240">nextJob(job_id)</label></transition><transition><source ref="id66"/><target ref="id67"/><label kind="assignment" x="-160" y="-48">nextJob(job_id)</label></transition><transition><source ref="id67"/><target ref="id65"/><label kind="guard" x="-320" y="0">offsets[job_id] == end[job_id]</label></transition><transition><source ref="id67"/><target ref="id69"/><label kind="guard" x="-16" y="24">offsets[job_id] &lt; end[job_id] &amp;&amp;
time &lt;=jobPreheatTime(job_id)</label></transition><transition><source ref="id67"/><target ref="id66"/><label kind="guard" x="-192" y="-120">time &gt; jobPreheatTime(job_id) &amp;&amp; 
offsets[job_id] &lt; end[job_id]</label><nail x="-96" y="-80"/></transition><transition><source ref="id69"/><target ref="id68"/><label kind="guard" x="-8" y="129">time == jobPreheatTime(job_id)</label><label kind="synchronisation" x="-8" y="144">check[job_id]!</label></transition><transition><source ref="id71"/><target ref="id70"/><label kind="guard" x="288" y="136">time == jobStartTime(job_id)</label><label kind="synchronisation" x="288" y="152">available[job_id]!</label><label kind="assignment" x="288" y="168">curr_time = jobStartTime(job_id)</label></transition></template><template><name>Job3</name><declaration>const id_t job_id = 3;</declaration><location id="id72" x="-32" y="208"><name x="-112" y="200">Precheck</name><committed/></location><location id="id73" x="-32" y="72"><name x="-42" y="42">Preheat</name></location><location id="id74" x="392" y="88"><name x="382" y="58">Start</name></location><location id="id75" x="-32" y="360"><name x="-72" y="328">Schedule</name><committed/></location><location id="id76" x="328" y="360"><name x="312" y="376">End</name><committed/></location><location id="id77" x="520" y="88"><name x="536" y="80">Stop</name><committed/></location><location id="id78" x="160" y="464"><name x="184" y="456">Skip</name><committed/></location><location id="id79" x="520" y="360"><name x="496" y="368">SlewingBack</name></location><location id="id80" x="520" y="208"><name x="536" y="208">Check_Attitude</name><committed/></location><location id="id81" x="392" y="208"><name x="376" y="216">Available</name><committed/></location><location id="id82" x="160" y="360"><name x="152" y="328">Idle</name></location><location id="id83" x="104" y="208"><name x="88" y="216">Align</name><committed/></location><location id="id84" x="248" y="72"><name x="176" y="56">Slewing</name></location><location id="id85" x="248" y="208"><name x="208" y="232">Correct_Attitude</name></location><init ref="id82"/><transition><source ref="id79"/><target ref="id76"/><label kind="synchronisation" x="392" y="336">reached?</label></transition><transition><source ref="id84"/><target ref="id85"/><label kind="synchronisation" x="256" y="104">reached?</label></transition><transition><source ref="id72"/><target ref="id83"/><label kind="guard" x="-16" y="208">isHeated(job_id)</label></transition><transition><source ref="id73"/><target ref="id83"/><label kind="synchronisation" x="24" y="96">preheated?</label></transition><transition><source ref="id72"/><target ref="id73"/><label kind="guard" x="-144" y="152">!isHeated(job_id)</label><label kind="synchronisation" x="-144" y="136">preheat[job_id]!</label></transition><transition><source ref="id75"/><target ref="id72"/><label kind="synchronisation" x="-152" y="296">schedule[job_id]!</label></transition><transition><source ref="id74"/><target ref="id77"/><label kind="synchronisation" x="416" y="41">not_available[job_id]?</label><label kind="assignment" x="416" y="56">stopJob(job_id)</label></transition><transition><source ref="id81"/><target ref="id74"/><label kind="synchronisation" x="328" y="128">bUpdate!</label></transition><transition><source ref="id80"/><target ref="id76"/><label kind="guard" x="336" y="264">!hasToSlewBack(job_id)</label><nail x="504" y="288"/><nail x="336" y="288"/></transition><transition><source ref="id78"/><target ref="id82"/><label kind="synchronisation" x="56" y="464">skip[job_id]!</label><label kind="assignment" x="56" y="480">cost+=
cost_rates[job_id]</label><nail x="64" y="464"/></transition><transition><source ref="id82"/><target ref="id75"/><label kind="guard" x="8" y="306">job_possible(job_id)</label><label kind="synchronisation" x="8" y="320">check[job_id]?</label><label kind="assignment" x="8" y="336">run(job_id)</label></transition><transition><source ref="id85"/><target ref="id81"/><label kind="synchronisation" x="272" y="168">available[job_id]?</label><label kind="assignment" x="272" y="184">startJob(job_id)</label></transition><transition><source ref="id76"/><target ref="id82"/><label kind="synchronisation" x="200" y="320">finish[job_id]!</label><label kind="assignment" x="200" y="336">endRun(job_id)</label></transition><transition><source ref="id77"/><target ref="id80"/><label kind="synchronisation" x="528" y="136">bUpdate!</label></transition><transition><source ref="id82"/><target ref="id78"/><label kind="guard" x="168" y="400">skipable(job_id)</label><label kind="synchronisation" x="168" y="416">check[job_id]?</label></transition><transition><source ref="id80"/><target ref="id79"/><label kind="guard" x="528" y="288">hasToSlewBack(job_id)</label><label kind="synchronisation" x="528" y="264">align[job_id]!</label></transition><transition><source ref="id83"/><target ref="id85"/><label kind="guard" x="120" y="208">isAligned(job_id)</label></transition><transition><source ref="id83"/><target ref="id84"/><label kind="guard" x="112" y="128">!isAligned(job_id)</label><label kind="synchronisation" x="112" y="144">align[job_id]!</label></transition></template><template><name>JobProvider3</name><declaration>const id_t job_id = 3;</declaration><location id="id86" x="128" y="360"><name x="104" y="376">PreHeat</name><label kind="invariant" x="0" y="392">time &lt;= jobStartTime(job_id) - slewing_time[job_id]</label></location><location id="id87" x="144" y="-24"><name x="134" y="-54">Wait</name></location><location id="id88" x="-208" y="224"><name x="-304" y="216">Check_end</name><committed/></location><location id="id89" x="-208" y="96"><name x="-256" y="88">End</name></location><location id="id90" x="-208" y="-24"><name x="-224" y="-56">Missed</name><committed/></location><location id="id91" x="-16" y="-24"><name x="-8" y="-16">Next</name><committed/></location><location id="id92" x="-16" y="224"><name x="-32" y="232">Action</name></location><location id="id93" x="-16" y="96"><name x="0" y="80">Idle</name><label kind="invariant" x="-8" y="104">time &lt;= jobPreheatTime(job_id)</label></location><location id="id94" x="280" y="96"><name x="288" y="64">Available</name><label kind="invariant" x="296" y="88">time&lt;=jobStopTime(job_id)</label></location><location id="id95" x="280" y="224"><name x="296" y="216">Slew</name><label kind="invariant" x="288" y="232">time &lt;= jobStartTime(job_id)</label></location><init ref="id93"/><transition><source ref="id86"/><target ref="id95"/><label kind="guard" x="232" y="280">time == jobStartTime(job_id) - slewing_time[job_id]</label><label kind="assignment" x="232" y="296">curr_time = jobStartTime(job_id) - slewing_time[job_id]</label></transition><transition><source ref="id92"/><target ref="id86"/><label kind="synchronisation" x="-136" y="297">schedule[job_id]?</label><label kind="assignment" x="-136" y="312">curr_time = jobPreheatTime(job_id)</label></transition><transition><source ref="id87"/><target ref="id91"/><label kind="synchronisation" x="16" y="-63">finish[job_id]?</label><label kind="assignment" x="16" y="-48">nextJob(job_id)</label></transition><transition><source ref="id94"/><target ref="id87"/><label kind="guard" x="208" y="-22">time == jobStopTime(job_id)</label><label kind="synchronisation" x="208" y="-7">not_available[job_id]!</label><label kind="assignment" x="208" y="8">curr_time = jobStopTime(job_id)</label></transition><transition><source ref="id88"/><target ref="id93"/><label kind="guard" x="-200" y="136">offsets[job_id] &lt; end[job_id]</label></transition><transition><source ref="id88"/><target ref="id89"/><label kind="guard" x="-392" y="160">offsets[job_id] == end[job_id]</label></transition><transition><source ref="id92"/><target ref="id88"/><label kind="synchronisation" x="-160" y="224">skip[job_id]?</label><label kind="assignment" x="-160" y="240">nextJob(job_id)</label></transition><transition><source ref="id90"/><target ref="id91"/><label kind="assignment" x="-160" y="-48">nextJob(job_id)</label></transition><transition><source ref="id91"/><target ref="id89"/><label kind="guard" x="-320" y="0">offsets[job_id] == end[job_id]</label></transition><transition><source ref="id91"/><target ref="id93"/><label kind="guard" x="-16" y="24">offsets[job_id] &lt; end[job_id] &amp;&amp;
time &lt;=jobPreheatTime(job_id)</label></transition><transition><source ref="id91"/><target ref="id90"/><label kind="guard" x="-192" y="-120">time &gt; jobPreheatTime(job_id) &amp;&amp; 
offsets[job_id] &lt; end[job_id]</label><nail x="-96" y="-80"/></transition><transition><source ref="id93"/><target ref="id92"/><label kind="guard" x="-8" y="129">time == jobPreheatTime(job_id)</label><label kind="synchronisation" x="-8" y="144">check[job_id]!</label></transition><transition><source ref="id95"/><target ref="id94"/><label kind="guard" x="288" y="136">time == jobStartTime(job_id)</label><label kind="synchronisation" x="288" y="152">available[job_id]!</label><label kind="assignment" x="288" y="168">curr_time = jobStartTime(job_id)</label></transition></template><template><name>Battery</name><declaration>power_t load = 0;

void update(){
    battery -= load * (curr_time - old_time);
    if(battery &lt;= min_cap) return;

    load = bg_load;
    old_time = curr_time;
    // sun
	for (id : id_t){
	  if (executing[id]){
        load += job_load[id];
      }
    }
    if (slewed){
        load += slew_load;
    }
    if (insolation){
        load -= sun_power_by_att[curr_att];
    }
    if (preheating){
        load += preheat_load;
    }
    if (battery &gt; max_cap){
        battery = max_cap;
    }
}</declaration><location id="id96" x="304" y="160"><name x="294" y="130">Max_load</name><committed/></location><location id="id97" x="-96" y="232"><name x="-106" y="202">Init</name><committed/></location><location id="id98" x="176" y="232"><name x="166" y="202">Check</name><committed/></location><location id="id99" x="304" y="232"><name x="294" y="202">Depletion</name><committed/></location><location id="id100" x="40" y="232"><name x="30" y="202">Idle</name></location><init ref="id97"/><transition><source ref="id98"/><target ref="id96"/><label kind="guard" x="160" y="160">load &gt; max_load</label></transition><transition><source ref="id100"/><target ref="id98"/><label kind="synchronisation" x="56" y="120">bUpdate?</label><label kind="assignment" x="56" y="136">update()</label><nail x="104" y="160"/></transition><transition><source ref="id97"/><target ref="id100"/></transition><transition><source ref="id98"/><target ref="id100"/><label kind="guard" x="32" y="248">battery &gt; min_cap &amp;&amp; 
load &lt;= max_load</label></transition><transition><source ref="id98"/><target ref="id99"/><label kind="guard" x="184" y="240">battery &lt;= min_cap</label></transition></template><template><name>Sun</name><location id="id101" x="-520" y="-48"><name x="-520" y="-48">S0</name><committed/></location><location id="id102" x="-192" y="-48"><name x="-192" y="-48">S1</name><committed/></location><location id="id103" x="-360" y="32"><name x="-360" y="32">S2</name><committed/></location><location id="id104" x="-360" y="264"><name x="-400" y="288">Set_time</name><committed/></location><location id="id105" x="-360" y="152"><name x="-376" y="168">End</name></location><location id="id106" x="-520" y="152"><name x="-600" y="152">Insolation</name><label kind="invariant" x="-688" y="120">time &lt;= stop_sun[i_sun]</label></location><location id="id107" x="-192" y="152"><name x="-168" y="152">Eclipse</name><label kind="invariant" x="-168" y="120">time &lt;= start_sun[i_sun]</label></location><location id="id108" x="-360" y="-48"><name x="-368" y="-80">Init</name><committed/></location><init ref="id108"/><transition><source ref="id104"/><target ref="id107"/><label kind="synchronisation" x="-280" y="216">bUpdate!</label><label kind="assignment" x="-280" y="231">setEclipse()</label></transition><transition><source ref="id103"/><target ref="id106"/><label kind="synchronisation" x="-488" y="72">bUpdate!</label><label kind="assignment" x="-488" y="88">setInsolation()</label></transition><transition><source ref="id101"/><target ref="id106"/><label kind="synchronisation" x="-656" y="32">bUpdate!</label></transition><transition><source ref="id108"/><target ref="id101"/><label kind="guard" x="-496" y="-78">start_sun[0] == 0</label><label kind="assignment" x="-496" y="-48">startInsolation()</label></transition><transition><source ref="id102"/><target ref="id107"/><label kind="synchronisation" x="-184" y="32">bUpdate!</label></transition><transition><source ref="id108"/><target ref="id102"/><label kind="guard" x="-336" y="-78">start_sun[0] &gt; 0</label><label kind="assignment" x="-336" y="-48">startEclipse()</label></transition><transition><source ref="id107"/><target ref="id103"/><label kind="guard" x="-368" y="64">time == start_sun[i_sun]
&amp;&amp; i_sun &lt; l_sun</label><label kind="assignment" x="-368" y="96">curr_time = start_sun[i_sun]</label></transition><transition><source ref="id106"/><target ref="id104"/><label kind="guard" x="-632" y="200">time == stop_sun[i_sun] 
&amp;&amp; i_sun &lt; l_sun</label><label kind="assignment" x="-632" y="232">curr_time = stop_sun[i_sun]</label></transition><transition><source ref="id107"/><target ref="id105"/><label kind="guard" x="-328" y="152">i_sun == l_sun</label></transition><transition><source ref="id106"/><target ref="id105"/><label kind="guard" x="-480" y="152">i_sun == l_sun</label></transition></template><template><name>End_simulation</name><location id="id109" x="-48" y="80"><name x="-72" y="48">Running</name><label kind="invariant" x="-136" y="104">time &lt;= stop_simulation</label></location><location id="id110" x="216" y="80"><name x="206" y="50">Lock</name><committed/></location><init ref="id109"/><transition><source ref="id109"/><target ref="id110"/><label kind="guard" x="16" y="56">time == stop_simulation</label></transition></template><template><name>ADCS</name><location id="id111" x="-328" y="-224"><name x="-338" y="-254">Slewing</name><label kind="invariant" x="-304" y="-232">time &lt;= slewing_end</label></location><location id="id112" x="-328" y="-88"><name x="-336" y="-72">End</name><committed/></location><location id="id113" x="-488" y="-224"><name x="-496" y="-256">Start</name><committed/></location><location id="id114" x="-488" y="-88"><name x="-504" y="-72">Idle</name></location><init ref="id114"/><transition><source ref="id111"/><target ref="id112"/><label kind="guard" x="-320" y="-183">time == slewing_end</label><label kind="synchronisation" x="-320" y="-168">reached!</label><label kind="assignment" x="-320" y="-153">stopSlewing()</label></transition><transition><source ref="id113"/><target ref="id111"/><label kind="synchronisation" x="-432" y="-248">bUpdate!</label></transition><transition><source ref="id112"/><target ref="id114"/><label kind="synchronisation" x="-432" y="-80">bUpdate!</label></transition><transition><source ref="id114"/><target ref="id113"/><label kind="select" x="-616" y="-184">job_id : id_t</label><label kind="synchronisation" x="-616" y="-168">align[job_id]?</label><label kind="assignment" x="-616" y="-152">startSlewing(job_id)</label></transition></template><template><name>Preheater</name><location id="id115" x="-32" y="24"><name x="-48" y="40">End</name><committed/></location><location id="id116" x="-32" y="-112"><name x="-42" y="-142">Wait</name><label kind="invariant" x="0" y="-120">time &lt;= preheat_end</label></location><location id="id117" x="-208" y="-112"><name x="-218" y="-142">Start</name><committed/></location><location id="id118" x="-208" y="24"><name x="-224" y="40">Idle</name></location><init ref="id118"/><transition><source ref="id115"/><target ref="id118"/><label kind="synchronisation" x="-152" y="32">bUpdate!</label></transition><transition><source ref="id116"/><target ref="id115"/><label kind="guard" x="-24" y="-64">time == preheat_end</label><label kind="synchronisation" x="-24" y="-47">preheated!</label><label kind="assignment" x="-24" y="-32">stopPreheat()</label></transition><transition><source ref="id117"/><target ref="id116"/><label kind="synchronisation" x="-160" y="-136">bUpdate!</label></transition><transition><source ref="id118"/><target ref="id117"/><label kind="select" x="-344" y="-64">job_id : id_t</label><label kind="synchronisation" x="-344" y="-48">preheat[job_id]?</label><label kind="assignment" x="-344" y="-32">startPreheat(job_id)</label></transition></template><system>Jb0 = Job0();
JbP0 = JobProvider0();
//Jb1 = Job1();
//JbP1 = JobProvider1();
//Jb2 = Job2();
//JbP2 = JobProvider2();
//Jb3 = Job3();
//JbP3 = JobProvider3();
S = Sun();
B = Battery();
End_S = End_simulation();
ADC = ADCS();
Ph = Preheater();
// List one or more processes to be composed into a system.
system Jb0, JbP0, Jb1, JbP1,Jb2, JbP2,Jb3, JbP3, S, B, ADC, End_S, Ph;
//,</system></nta>