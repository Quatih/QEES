<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>
// Place global declarations here.


clock time;
typedef int[0, 10000000] time_t;
typedef int[-4000, 20000] power_t;
typedef int[0, 149760000] charge_t;

time_t new_time = 0;

const int job_ids = 4; 
// L1-Band, L2-Band, X-Band, UHF

chan preHeat[job_ids], available[job_ids], not_available[job_ids];

// length of sun times
const int l_sun = 43;
// The start and stop times of each insolation period
const int start_sun[l_sun] = {1151, 6655, 12159, 17663, 23168, 28672, 34176, 39680, 45184, 50688, 56192, 61696, 67200, 72705, 78209, 83713, 89217, 94721, 100226, 105730, 111234, 116738, 122242, 127747, 133251, 138755, 144260, 149764, 155268, 160773, 166277, 171781, 177286, 182790, 188295, 193799, 199304, 204808, 210313, 215818, 221322, 226827, 232332 };
const int stop_sun[l_sun] = {4620, 10127, 15633, 21140, 26646, 32153, 37660, 43167, 48673, 54180, 59687, 65194, 70701, 76208, 81715, 87222, 92729, 98236, 103743, 109250, 114757, 120265, 125772, 131279, 136786, 142294, 147801, 153309, 158816, 164324, 169831, 175339, 180846, 186354, 191862, 197369, 202877, 208385, 213893, 219401, 224909, 230417, 235925 };
int i_sun = 0;

const int l_x = 24;
const int start_x[l_x] = {6837, 23916, 29751, 60592, 65340, 66202, 70973, 71954, 77737, 83484, 89215, 95054, 106372, 112047, 148622, 153366, 154327, 159207, 160108, 165873, 171604, 177362, 194425, 200321 };
const int stop_x[l_x] = {7354, 24504, 30099, 61025, 65751, 66803, 71549, 72532, 78291, 84075, 89800, 95322, 106842, 112605, 149188, 153954, 154924, 159559, 160664, 166444, 172208, 177852, 195021, 200556 };

const int l_l1 = 38;
const int start_l1[l_l1] = {5367, 11204, 16951, 22674, 28430, 34307, 40374, 46421, 52289, 58049, 63772, 69513, 75349, 81376, 87459, 93369, 99149, 104876, 110608, 116414, 122392, 128487, 134437, 140238, 145971, 151696, 157475, 163402, 169496, 175495, 181325, 187070, 192792, 198552, 204435, 210504, 216541, 222402 };
const int stop_l1[l_l1] = {10937, 16774, 22521, 28244, 34000, 39877, 45944, 51991, 57859, 63619, 69342, 75083, 80919, 86946, 93029, 98939, 104719, 110446, 116178, 121984, 127962, 134057, 140007, 145808, 151541, 157266, 163045, 168972, 175066, 181065, 186895, 192640, 198362, 204122, 210005, 216074, 222111, 227972 };

const int l_l2 = 39;
const int start_l2[l_l2] = {2707, 8521, 14261, 19986, 25756, 31664, 37749, 43768, 49614, 55366, 61090, 66845, 72711, 78765, 84817, 90695, 96462, 102187, 107928, 113757, 119768, 125851, 131771, 137558, 143288, 149021, 154821, 160786, 166875, 172835, 178644, 184381, 190108, 195884, 201800, 207883, 213889, 219727, 225477 };
const int stop_l2[l_l2] = {8277, 14091, 19831, 25556, 31326, 37234, 43319, 49338, 55184, 60936, 66660, 72415, 78281, 84335, 90387, 96265, 102032, 107757, 113498, 119327, 125338, 131421, 137341, 143128, 148858, 154591, 160391, 166356, 172445, 178405, 184214, 189951, 195678, 201454, 207370, 213453, 219459, 225297, 231047 };

const int l_uhf = 11;
const int start_uhf[l_uhf] = {60917, 66429, 72087, 77787, 83507, 89317, 148887, 154504, 160190, 165900, 171645 };
const int stop_uhf[l_uhf] = {61141, 66947, 72667, 78366, 84023, 89530, 149330, 155067, 160775, 166457, 172058 };

int ind[job_ids] = {0,0,0,0};
bool running[job_ids] = {false, false, false, false};
int job_count[job_ids] = {0,0,0,0};

const int preheat_time [job_ids] = {
  20*60,// L1-band
  20*60,// L2-band
  10*60,// X-band
  0//UHF
};

int jobStartTime(const int job_id){
  if (job_id == 0) return start_l1[ind[job_id]];
  if (job_id == 1) return start_l2[ind[job_id]];
  if (job_id == 2) return start_x[ind[job_id]];
  if (job_id == 3) return start_uhf[ind[job_id]];
}

int jobStopTime(const int job_id){
  if (job_id == 0) return stop_l1[ind[job_id]];
  if (job_id == 1) return stop_l2[ind[job_id]];
  if (job_id == 2) return stop_x[ind[job_id]];
  if (job_id == 3) return stop_uhf[ind[job_id]];
}

int jobPreheatTime(const int job_id){
  return jobStartTime(job_id) - preheat_time[job_id];
}

void nextJob(const int job_id){
  new_time=jobStopTime(job_id);
  ind[job_id] = ind[job_id] + 1;
}

bool skipable(const int job_id){
  if (job_id == 3) return false; // force UHF to execute if able
  return true;
}

void startJob(const int job_id){
  running[job_id] = true;
  if (job_id &lt; 2) r = r + r_x;//L band
  if (job_id == 2) r = r - r_l; //X-band
}

void stopJob(const int job_id){
  running[job_id] = false;
  job_count[job_id] = job_count[job_id] + 1;
}
int r = 0;
int r_l = 1;
int r_x = 2;

bool job_possible(const int job_id){
  if(job_id == 3) return true; // prioritize UHF
  // heuristics
  if((job_id == 2) &amp;&amp; (r &gt;= r_l)) return true; // x-band
  if((job_id &lt;2) &amp;&amp; (r &lt; (r_x+r_l)*r_l)) return true; // l-band
  return false;
}</declaration><template><name>Job1</name><declaration>const int job_id = 0;</declaration><location id="id0" x="536" y="80"><name x="526" y="50">End</name><committed/></location><location id="id1" x="72" y="80"><name x="62" y="50">Penalty</name><label kind="invariant" x="62" y="95">cost'==
costRate(job_id)</label></location><location id="id2" x="-64" y="80"><name x="-74" y="50">Skip</name></location><location id="id3" x="536" y="360"><name x="552" y="314">SlewingBack</name></location><location id="id4" x="536" y="216"><name x="560" y="200">Check_Attitude</name><committed/></location><location id="id5" x="376" y="208"><name x="366" y="178">Available</name><committed/></location><location id="id6" x="-64" y="208"><name x="-74" y="178">Idle</name></location><location id="id7" x="112" y="208"><name x="102" y="178">Align</name><committed/></location><location id="id8" x="376" y="80"><name x="366" y="50">Start</name></location><location id="id9" x="240" y="80"><name x="230" y="50">Slewing</name></location><location id="id10" x="240" y="208"><name x="230" y="178">Correct_Attitude</name></location><init ref="id6"/><transition><source ref="id0"/><target ref="id4"/><label kind="synchronisation" x="472" y="128">bUpdate!</label></transition><transition><source ref="id4"/><target ref="id6"/><label kind="guard" x="128" y="272">!hasToSlewBack(job_id)</label><nail x="440" y="312"/><nail x="8" y="312"/></transition><transition><source ref="id1"/><target ref="id6"/><label kind="synchronisation" x="-40" y="128">not_available[job_id]?</label></transition><transition><source ref="id6"/><target ref="id2"/><label kind="guard" x="-160" y="120">skipable(job_id)</label><label kind="synchronisation" x="-160" y="136">preHeat[job_id]?</label></transition><transition><source ref="id2"/><target ref="id1"/><label kind="synchronisation" x="-40" y="56">available[job_id]?</label></transition><transition><source ref="id8"/><target ref="id0"/><label kind="synchronisation" x="400" y="56">not_available[job_id]?</label><label kind="assignment" x="400" y="40">endExperiment(job_id)</label></transition><transition><source ref="id3"/><target ref="id6"/><label kind="synchronisation" x="168" y="320">reached?</label><label kind="assignment" x="168" y="336">unlockIfNeeded(job_id)</label><nail x="-64" y="360"/></transition><transition><source ref="id4"/><target ref="id3"/><label kind="guard" x="546" y="245">hasToSlewBack(job_id)</label><label kind="synchronisation" x="544" y="264">alignTo[a_N]!</label></transition><transition><source ref="id10"/><target ref="id5"/><label kind="synchronisation" x="264" y="208">available[job_id]?</label><label kind="assignment" x="264" y="223">startExperiment(job_id)</label></transition><transition><source ref="id6"/><target ref="id7"/><label kind="guard" x="-8" y="154">exp_possible(job_id)</label><label kind="synchronisation" x="-8" y="169">preHeat[job_id]?</label><label kind="assignment" x="-8" y="184">lockIfNeeded(job_id)</label></transition><transition><source ref="id7"/><target ref="id10"/><label kind="guard" x="128" y="208">isAligned(job_id)</label></transition><transition><source ref="id5"/><target ref="id8"/><label kind="synchronisation" x="384" y="128">bUpdate!</label></transition><transition><source ref="id9"/><target ref="id10"/><label kind="synchronisation" x="248" y="144">reached?</label></transition><transition><source ref="id7"/><target ref="id9"/><label kind="guard" x="112" y="152">!isAligned(job_id)</label><label kind="synchronisation" x="112" y="136">alignTo[a_nfe[job_id]]!</label></transition></template><template><name>JobProvider1</name><declaration>const p_id job_id=0;</declaration><location id="id11" x="40" y="80"><name x="30" y="50">Idle</name><label kind="invariant" x="-168" y="64">time &lt;= jobPreheatTime(job_ids)</label></location><location id="id12" x="190" y="80"><name x="180" y="50">Available</name><label kind="invariant" x="208" y="64">time &lt;= jobStopTime(job_ids)</label></location><location id="id13" x="190" y="230"><name x="180" y="200">PreHeat</name><label kind="invariant" x="180" y="245">time &lt;= jobStartTime(job_ids)</label></location><init ref="id11"/><transition><source ref="id11"/><target ref="id13"/><label kind="guard" x="-128" y="128">time == jobPreheatTime(job_ids)</label><label kind="synchronisation" x="-128" y="144">preHeat[job_ids]!</label><label kind="assignment" x="-128" y="160">new_time = jobPreheatTime(job_ids)</label></transition><transition><source ref="id13"/><target ref="id12"/><label kind="guard" x="224" y="112">time == jobStartTime(job_ids)</label><label kind="synchronisation" x="224" y="128">available[job_ids]!</label><label kind="assignment" x="224" y="144">new_time = jobStartTime(job_ids)</label></transition><transition><source ref="id12"/><target ref="id11"/><label kind="guard" x="40" y="-16">time == jobStopTime(job_ids)</label><label kind="synchronisation" x="56" y="0">not_available[job_ids]!</label><label kind="assignment" x="80" y="16">nextJob(job_ids)</label></transition></template><template><name>Battery</name><parameter>const soc_t lb, const soc_t ub</parameter><declaration>load_t load = 0;
Int old_time = 0;
//meta int par;

void update(){
    soc -= load * (new_time - old_time);
    if (soc &gt; ub){    //align to bound
        soc = ub;
    }
    old_time = new_time;
    load = default_bg_load;
    //par = 0;	
    for(job_id:p_id){
        load += pa[job_id] ? power_p[job_id] : 0;
        //par += pa[job_id] ? 1 : 0;
    }
    //if (par &gt; 1) soc = 0;
    load += slewing ? power_slewing : 0;
    load -= insolation ? power_g[a] : 0;
    if (load &gt; max_load) soc = 0; //deadlock
}


bool depleted(){
    return soc &lt;= lb;
}</declaration><location id="id14" x="-96" y="232"><name x="-106" y="202">Init</name><committed/></location><location id="id15" x="176" y="232"><name x="166" y="202">Check</name><committed/></location><location id="id16" x="304" y="232"><name x="294" y="202">Depletion</name><committed/></location><location id="id17" x="40" y="232"><name x="30" y="202">Idle</name></location><init ref="id14"/><transition><source ref="id14"/><target ref="id17"/><label kind="assignment" x="-56" y="208">update()</label></transition><transition><source ref="id17"/><target ref="id15"/><label kind="synchronisation" x="55" y="140">bUpdate?</label><label kind="assignment" x="176" y="160">update()</label></transition><transition><source ref="id15"/><target ref="id17"/><label kind="guard" x="88" y="208">soc &gt; lb</label></transition><transition><source ref="id15"/><target ref="id16"/><label kind="guard" x="216" y="208">soc &lt;= lb</label></transition></template><template><name>Sun</name><declaration>bool updateAfterInsolationEnd = 0 ;

void eclipseEnd(){
    insolation = true;
    new_time = eclipseEndTime();
    if(!updateAfterInsolationEnd) sun_c++;
}

void insolationEnd(){
    insolation = false;
    new_time = insolationEndTime();
    if(updateAfterInsolationEnd) sun_c++;
}</declaration><location id="id18" x="40" y="80"><name x="30" y="50">Init</name><committed/></location><location id="id19" x="190" y="80"><name x="180" y="50">Eclipse</name><label kind="invariant" x="180" y="95">gc&lt;=eclipseEndTime()</label></location><location id="id20" x="190" y="230"><name x="180" y="200">Insolation</name><label kind="invariant" x="180" y="245">gc &lt;= insolationEndTime()</label></location><init ref="id18"/><transition><source ref="id18"/><target ref="id20"/><label kind="guard" x="55" y="125">eclipseEndTime() &gt; insolationEndTime()</label><label kind="assignment" x="55" y="155">insolation=true,
updateAfterInsolationEnd=false</label></transition><transition><source ref="id18"/><target ref="id19"/><label kind="guard" x="55" y="50">eclipseEndTime() &lt;= insolationEndTime()</label><label kind="assignment" x="55" y="80">updateAfterInsolationEnd=true</label></transition><transition><source ref="id19"/><target ref="id20"/><label kind="guard" x="130" y="125">gc == eclipseEndTime()</label><label kind="synchronisation" x="130" y="140">bUpdate!</label><label kind="assignment" x="130" y="155">eclipseEnd()</label></transition><transition><source ref="id20"/><target ref="id19"/><label kind="guard" x="130" y="125">gc == insolationEndTime()</label><label kind="synchronisation" x="130" y="140">bUpdate!</label><label kind="assignment" x="130" y="155">insolationEnd()</label></transition></template><template><name>Termination</name><declaration>void last(){
	new_time = 86400 ;
}</declaration><location id="id21" x="40" y="80"><name x="30" y="50">Idle</name><label kind="invariant" x="30" y="95">gc &lt;= 86400</label></location><location id="id22" x="190" y="80"><name x="180" y="50">Inter</name><committed/></location><location id="id23" x="190" y="230"><name x="208" y="216">Lock</name><committed/></location><init ref="id21"/><transition><source ref="id21"/><target ref="id22"/><label kind="guard" x="55" y="50">gc == 86400</label><label kind="synchronisation" x="55" y="65">bUpdate!</label><label kind="assignment" x="55" y="80">last()</label></transition><transition><source ref="id22"/><target ref="id23"/><label kind="assignment" x="200" y="136">cost += (0 == 0) ? 0 : ((capacity - soc) / 0)</label></transition></template><system>AC = AttitudeControl();
B = Battery(safe_threshold, capacity);
//OC = OrbitCounter();
E0 = Experiment0();
E1 = Experiment1();
E2 = Experiment2();
E3 = Experiment3();
E4 = Experiment4();
E5 = Experiment5();
E6 = Experiment6();
EP0 = Exp_Provider0();
EP1 = Exp_Provider1();
EP2 = Exp_Provider2();
EP3 = Exp_Provider3();
EP4 = Exp_Provider4();
EP5 = Exp_Provider5();
EP6 = Exp_Provider6();
T = Termination();

// List one or more processes to be composed into a system.
system E0, E1, E2, E3, E4, E5, E6, EP0, EP1, EP2, EP3, EP4, EP5, EP6, Sun, AC, B, T;</system></nta>